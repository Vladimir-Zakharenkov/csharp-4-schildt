#region Russian

/*

Использование кодовых блоков

Еще одним важным элементом C# является кодовый блок, который представляет
собой группу операторов. Для его организации достаточно расположить операторы
между открывающей и закрывающей фигурными скобками. Как только кодовый блок
будет создан, он станет логическим элементом, который можно использовать в любом
месте программы, где применяется одиночный оператор. В частности, кодовый блок
может служить адресатом операторов if и for. Рассмотрим следующий оператор if.

if(w < h) {
    v = w * h;
    w = 0;
}

Если в данном примере кода значение переменной w меньше значения переменной
h, то оба оператора выполняются в кодовом блоке. Они образуют внутри кодового
блока единый логический элемент, причем один не может выполняться без другого.
Таким образом, если требуется логически связать два (или более) оператора, то для
этой цели следует создать кодовый блок. С помощью кодовых блоков можно более
эффективно и ясно реализовать многие алгоритмы.

Ниже приведен пример программы, в которой кодовый блок служит для того, чтобы
исключить деление на нуль.

*/

// Продемонстрировать применение кодового блока.

using System;

class BlockDemo
{
    static void Main()
    {
        int i, j, d;

        i = 5;
        j = 10;

        // Адресатом этого оператора if служит кодовый блок.
        if (i != 0)
        {
            Console.WriteLine("i не равно нулю");
            d = j / i;
            Console.WriteLine("j / i равно " + d);
        }
    }
}

/*

Вот к какому результату приводит выполнение данной программы.

i не равно нулю
j / i равно 2

В данном примере адресатом оператора if служит кодовый блок, а не единственный
оператор. Если условие, управляющее оператором if, оказывается истинным, то
выполняются три оператора в кодовом блоке. Попробуйте задать нулевое значение
переменной i, чтобы посмотреть, что из этого получится.

*/

#endregion

#region English

/*

Using Code Blocks

Another key element of C# is the code block. A code block is a grouping of statements. This is
done by enclosing the statements between opening and closing curly braces. Once a block of
code has been created, it becomes a logical unit that can be used any place a single statement
can. For example, a block can be a target for if and for statements. Consider this if statement:

if(w < h) {
    v = w * h;
    w = 0;
}

Here, if w is less than h, then both statements inside the block will be executed. Thus, the two
statements inside the block form a logical unit, and one statement cannot execute without the
other also executing. The key point here is that whenever you need to logically link two or
more statements, you do so by creating a block. Code blocks allow many algorithms to be
implemented with greater clarity and efficiency.

Here is a program that uses a code block to prevent a division by zero:

*/

// Demonstrate a block of code.

//using System;

//class BlockDemo
//{
//    static void Main()
//    {
//        int i, j, d;

//        i = 5;
//        j = 10;

//        // The target of this if is a block.
//        if (i != 0)
//        {
//            Console.WriteLine("i does not equal zero");
//            d = j / i;
//            Console.WriteLine("j / i is " + d);
//        }
//    }
//}

/*

The output generated by this program is shown here:

i does not equal zero
j / i is 2

In this case, the target of the if statement is a block of code and not just a single statement.
If the condition controlling the if is true (as it is in this case), the three statements inside the
block will be executed. Try setting i to zero and observe the result.

*/

#endregion