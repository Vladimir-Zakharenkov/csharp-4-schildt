#region MyRegion

/*

Оператор цикла

Для повторного выполнения последовательности операций в программе можно
организовать цикл. Язык C# отличается большим разнообразием циклических конструкций.
Здесь будет рассмотрен оператор цикла for. Как и у оператора if, у оператора
for в C# имеются аналоги в С, C++ и Java. Ниже приведена простейшая форма
этого оператора.

for(инициализация; условие; итерация) оператор;

В самой общей форме в части инициализация данного оператора задается начальное
значение переменной управления циклом. Часть условие представляет собой
булево выражение, проверяющее значение переменной управления циклом. Если результат
проверки истинен, то цикл продолжается. Если же он ложен, то цикл завершается.
В части итерация определяется порядок изменения переменной управления
циклом на каждом шаге цикла, когда он повторяется. Ниже приведен пример краткой
программы, демонстрирующей применение оператора цикла for.

*/

// Продемонстрировать применение оператора цикла for.

using System;

class ForDemo
{
    static void Main()
    {
        int count;

        for (count = 0; count < 5; count = count + 1)
        {
            Console.WriteLine("Это подсчет: " + count);
        }

        Console.WriteLine("Готово!");
    }
}

/*

Вот как выглядит результат выполнения данной программы.

Это подсчет: 0
Это подсчет: 1
Это подсчет: 2
Это подсчет: 3
Это подсчет: 4
Готово!

В данном примере count выполняет роль переменной управления циклом. В инициализирующей
части оператора цикла for задается нулевое значение этой переменной.
В начале каждого шага цикла, включая и первый, проверяется условие count < 5.
Если эта проверка дает истинный результат, то выполняется оператор, содержащий
метод WriteLine(). Далее выполняется итерационная часть оператора цикла for,
где значение переменной count увеличивается на 1. Этот процесс повторяется до тех
пор, пока значение переменной count не достигнет величины 5. В этот момент проверка
упомянутого выше условия дает ложный результат, что приводит к завершению
цикла. Выполнение программы продолжается с оператора, следующего после цикла.

Любопытно, что в программах, профессионально написанных на С#, вы вряд ли увидите
итерационную часть оператора цикла в том виде, в каком она представлена в приведенном
выше примере программы, т.е. вы редко встретите следующую строку.

count = count + 1;

Дело в том, что в C# имеется специальный оператор инкремента, выполняющий
приращение на 1 значение переменной, или так называемого операнда. Этот оператор
обозначается двумя знаками +(++). Используя оператор инкремента, можно переписать
приведенную выше строку следующим образом.

count++;

Таким образом, оператор цикла for из приведенного выше примера программы
обычно записывается в следующем виде.

for(count = 0; count < 5; count++)

Опробуйте этот более краткий способ записи итерационной части цикла. Вы сами
можете убедиться, что данный цикл выполняется так же, как и прежде.

В C# имеется также оператор декремента, обозначаемый двумя дефисами (--). Этот
оператор уменьшает значение операнда на 1.

*/

#endregion

#region English

/*

The for Loop

You can repeatedly execute a sequence of code by creating a loop. C# supplies a powerful
assortment of loop constructs. The one we will look at here is the for loop. Like the if
statement, the C# for loop is similar to its counterpart in C, C++, and Java. The simplest
form of the for loop is shown here:

for(initialization; condition; iteration) statement;

In its most common form, the initialization portion of the loop sets a loop control variable
to an initial value. The condition is a Boolean expression that tests the loop control variable. If
the outcome of that test is true, the for loop continues to iterate. If it is false, the loop 
terminates. The iteration expression determines how the loop control variable is changed each time 
the loop iterates. Here is a short program that illustrates the for loop:

*/

// Demonstrate the for loop.

//using System;

//class ForDemo
//{
//    static void Main()
//    {
//        int count;

//        for (count = 0; count < 5; count = count + 1)
//            Console.WriteLine("This is count: " + count);

//        Console.WriteLine("Done!");
//    }
//}

/*

The output generated by the program is shown here:

This is count: 0
This is count: 1
This is count: 2
This is count: 3
This is count: 4
Done!

In this example, count is the loop control variable. It is set to zero in the initialization portion
of the for. At the start of each iteration (including the first one), the conditional test count < 5
is performed. If the outcome of this test is true, the WriteLine() statement is executed. Next,
the iteration portion of the loop is executed, which adds 1 to count. This process continues
until count reaches 5. At this point, the conditional test becomes false, causing the loop to
terminate. Execution picks up at the bottom of the loop.

As a point of interest, in professionally written C# programs you will almost never see
the iteration portion of the loop written as shown in the preceding program. That is, you
will seldom see statements like this:

count = count + 1;

The reason is that C# includes a special increment operator that performs this operation.
The increment operator is ++ (that is, two consecutive plus signs). The increment operator
increases its operand by one. By use of the increment operator, the preceding statement can
be written like this:

count++;

Thus, the for in the preceding program will usually be written like this:

for(count = 0; count < 5; count++)

You might want to try this. As you will see, the loop still runs exactly the same as it did before.

C# also provides a decrement operator, which is specified as – –. This operator decreases
its operand by one.

*/

#endregion