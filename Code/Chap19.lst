listing 1
// Create a simple LINQ query. 
using System;  
using System.Linq;  
 
class SimpQuery { 
  static void Main() {  
 
    int[] nums =  { 1, -2, 3, 0, -4, 5 }; 
 
    // Create a query that obtains only positive numbers.  
    var posNums = from n in nums 
                  where n > 0 
                  select n; 
 
    Console.Write("The positive values in nums: "); 
 
    // Execute the query and display the results. 
    foreach(int i in posNums) Console.Write(i + " "); 
 
    Console.WriteLine(); 
  }  
}

listing 2
// Create a simple query. 
using System;  
using System.Linq;  
using System.Collections.Generic; 
 
class SimpQuery { 
  static void Main() {  
 
    int[] nums =  { 1, -2, 3, 0, -4, 5 }; 
 
    // Create a query that obtains only positive numbers.  
    var posNums = from n in nums 
                  where n > 0 
                  select n; 
 
    Console.Write("The positive values in nums: "); 
 
    // Execute the query and display the results. 
    foreach(int i in posNums) Console.Write(i + " "); 
    Console.WriteLine();  
 
    // Change nums. 
    Console.WriteLine("\nSetting nums[1] to 99."); 
    nums[1] = 99; 
 
    Console.Write("The positive values in nums after change: "); 
 
    // Execute the query a second time. 
    foreach(int i in posNums) Console.Write(i + " "); 
    Console.WriteLine();  
  }  
}

listing 3
// Use multiple where clauses. 
using System;  
using System.Linq;  
  
class TwoWheres { 
  static void Main() {  
 
    int[] nums =  { 1, -2, 3, -3, 0, -8, 12, 19, 6, 9, 10 }; 
 
    // Create a query that obtains positive values less than 10.  
    var posNums = from n in nums 
                  where n > 0 
                  where n < 10 
                  select n; 
 
    Console.Write("The positive values less than 10: "); 
 
    // Execute the query and display the results. 
    foreach(int i in posNums) Console.Write (i + " "); 
    Console.WriteLine(); 
  }  
}

listing 4
// Demonstrate another where clause. 
using System;  
using System.Linq;  
 
class WhereDemo2 { 
 
  static void Main() {  
 
    string[] strs = { ".com", ".net", "hsNameA.com", "hsNameB.net", 
                    "test", ".network", "hsNameC.net", "hsNameD.com" }; 
 
    // Create a query that obtains Internet addresses that 
    // end with .net. 
    var netAddrs = from addr in strs 
                   where addr.Length > 4 &&
                         addr.EndsWith(".net", StringComparison.Ordinal) 
                   select addr; 
 
    // Execute the query and display the results. 
    foreach(var str in netAddrs) Console.WriteLine(str); 
  }  
}

listing 5
// Demonstrate orderby. 
using System;  
using System.Linq;  
 
class OrderbyDemo { 
 
  static void Main() {  
 
    int[] nums =  { 10, -19, 4, 7, 2, -5, 0 }; 
 
    // Create a query that obtains the values in sorted order. 
    var posNums = from n in nums 
                  orderby n 
                  select n; 
 
    Console.Write("Values in ascending order: "); 
 
    // Execute the query and display the results. 
    foreach(int i in posNums) Console.Write(i + " "); 
 
    Console.WriteLine(); 
  }  
}

listing 6
// Sort on multiple criteria with orderby. 
using System;  
using System.Linq;  
 
class Account { 
  public string FirstName { get; private set; } 
  public string LastName { get; private set; } 
  public double Balance { get; private set; } 
  public string AccountNumber { get; private set; } 
 
  public Account(string fn, string ln, string accnum, double b) { 
    FirstName = fn; 
    LastName = ln; 
    AccountNumber = accnum; 
    Balance = b; 
  } 
} 
 
class OrderbyDemo { 
 
  static void Main() {  
 
    // Create some data. 
    Account[] accounts = { new Account("Tom", "Smith", "132CK", 100.23), 
                           new Account("Tom", "Smith", "132CD", 10000.00), 
                           new Account("Ralph", "Jones", "436CD", 1923.85), 
                           new Account("Ralph", "Jones", "454MM", 987.132), 
                           new Account("Ted", "Krammer", "897CD", 3223.19), 
                           new Account("Ralph", "Jones", "434CK", -123.32), 
                           new Account("Sara", "Smith", "543MM", 5017.40), 
                           new Account("Sara", "Smith", "547CD", 34955.79), 
                           new Account("Sara", "Smith", "843CK", 345.00),  
                           new Account("Albert", "Smith", "445CK", -213.67), 
                           new Account("Betty", "Krammer","968MM", 5146.67), 
                           new Account("Carl", "Smith", "078CD", 15345.99), 
                           new Account("Jenny", "Jones", "108CK", 10.98) 
                         }; 
 
    // Create a query that obtains the accounts in sorted order. 
    // Sorting first by last name, then within same last names, by  
    // by first name, and finally by account balance. 
    var accInfo = from acc in accounts 
                  orderby acc.LastName, acc.FirstName, acc.Balance  
                  select acc; 
 
    Console.WriteLine("Accounts in sorted order: "); 
 
    string str = ""; 
 
    // Execute the query and display the results. 
    foreach(Account acc in accInfo) { 
      if(str != acc.FirstName) { 
        Console.WriteLine(); 
        str = acc.FirstName; 
      } 
 
      Console.WriteLine("{0}, {1}\tAcc#: {2}, {3,10:C}", 
                        acc.LastName, acc.FirstName, 
                        acc.AccountNumber, acc.Balance); 
    } 
    Console.WriteLine(); 
  }  
}

listing 7
// Use select to return the square root of all positive values 
// in an array of doubles. 
using System;  
using System.Linq;  
 
class SelectDemo { 
 
  static void Main() {  
 
    double[] nums =  { -10.0, 16.4, 12.125, 100.85, -2.2, 25.25, -3.5 } ; 
 
    // Create a query that returns the square roots of the  
    // positive values in nums. 
    var sqrRoots = from n in nums 
                   where n > 0 
                   select Math.Sqrt(n); 
 
    Console.WriteLine("The square roots of the positive values" + 
                      " rounded to two decimal places:"); 
 
    // Execute the query and display the results. 
    foreach(double r in sqrRoots) Console.WriteLine("{0:#.##}", r); 
  }  
}

listing 8
// Return a portion of the range variable.  
using System;  
using System.Linq;  
  
class EmailAddress { 
  public string Name { get; set; } 
  public string Address { get; set; } 
 
  public EmailAddress(string n, string a) { 
    Name = n; 
    Address = a; 
  } 
} 
 
class SelectDemo2 { 
  static void Main() {  
 
    EmailAddress[] addrs = { 
         new EmailAddress("Herb", "Herb@HerbSchildt.com"), 
         new EmailAddress("Tom", "Tom@HerbSchildt.com"), 
         new EmailAddress("Sara", "Sara@HerbSchildt.com") 
    }; 
 
    // Create a query that selects e-mail addresses.  
    var eAddrs = from entry in addrs 
                 select entry.Address; 
 
    Console.WriteLine("The e-mail addresses are"); 
 
    // Execute the query and display the results. 
    foreach(string s in eAddrs) Console.WriteLine("  " + s); 
  }  
}

listing 9
// Use a query to obtain a sequence of EmailAddresses 
// from a list of ContactInfo. 
using System;  
using System.Linq;  
 
class ContactInfo { 
  public string Name { get; set; } 
  public string Email { get; set; } 
  public string Phone { get; set; } 
 
  public ContactInfo(string n, string a, string p) { 
    Name = n; 
    Email = a; 
    Phone = p; 
  } 
} 
  
class EmailAddress { 
  public string Name { get; set; } 
  public string Address { get; set; } 
 
  public EmailAddress(string n, string a) { 
    Name = n; 
    Address = a; 
  } 
} 
 
class SelectDemo3 { 
  static void Main() {  
 
    ContactInfo[] contacts = { 
         new ContactInfo("Herb", "Herb@HerbSchildt.com", "555-1010"), 
         new ContactInfo("Tom", "Tom@HerbSchildt.com", "555-1101"), 
         new ContactInfo("Sara", "Sara@HerbSchildt.com", "555-0110") 
    }; 
 
    // Create a query that creates a list of EmailAddress objects. 
    var emailList = from entry in contacts 
                    select new EmailAddress(entry.Name, entry.Email); 
 
    Console.WriteLine("The e-mail list is"); 
 
    // Execute the query and display the results. 
    foreach(EmailAddress e in emailList)  
      Console.WriteLine("  {0}: {1}", e.Name, e.Address ); 
  }  
}

listing 10
// Use two from clauses to create a list of all 
// possible combinations of the letters A, B, and C 
// with the letters X, Y, and Z. 
using System;  
using System.Linq;  
 
 
// This class holds the result of the query. 
class ChrPair { 
  public char First; 
  public char Second; 
 
  public ChrPair(char c, char c2) { 
    First = c; 
    Second = c2; 
  } 
} 
 
class MultipleFroms { 
  static void Main() {  
 
    char[] chrs = { 'A', 'B', 'C' }; 
    char[] chrs2 = { 'X', 'Y', 'Z' }; 
 
    // Notice that the first from iterates over chrs and 
    // the second from iterates over chrs2. 
    var pairs = from ch1 in chrs 
                  from ch2 in chrs2 
                  select new ChrPair(ch1, ch2); 
 
    Console.WriteLine("All combinations of ABC with XYZ: "); 
 
    foreach(var p in pairs)  
      Console.WriteLine("{0} {1}", p.First, p.Second); 
  }  
}

listing 11
// Demonstrate the group clause. 
using System;  
using System.Linq;  
 
class GroupDemo { 
 
  static void Main() {  
 
    string[] websites = { "hsNameA.com", "hsNameB.net", "hsNameC.net", 
                          "hsNameD.com", "hsNameE.org", "hsNameF.org", 
                          "hsNameG.tv",  "hsNameH.net", "hsNameI.tv" }; 
 
    // Create a query that groups web sites by top-level domain name. 
    var webAddrs = from addr in websites 
                   where addr.LastIndexOf('.') != -1 
                   group addr by addr.Substring(addr.LastIndexOf('.')); 
 
    // Execute the query and display the results. 
    foreach(var sites in webAddrs) { 
      Console.WriteLine("Web sites grouped by " + sites.Key); 
      foreach(var site in sites) 
        Console.WriteLine("  " + site); 
      Console.WriteLine(); 
    } 
  }  
}

listing 12
// Use into with group. 
using System;  
using System.Linq;  
 
class IntoDemo { 
 
  static void Main() {  
 
    string[] websites = { "hsNameA.com", "hsNameB.net", "hsNameC.net", 
                          "hsNameD.com", "hsNameE.org", "hsNameF.org", 
                          "hsNameG.tv",  "hsNameH.net", "hsNameI.tv" }; 
 
    // Create a query that groups web sites by top-level domain name, 
    // but select only those groups that have more than two members. 
    // Here, ws is the range variable over the set of groups 
    // returned when the first half of the query is executed.  
    var webAddrs = from addr in websites 
                   where addr.LastIndexOf('.') != -1 
                   group addr by addr.Substring(addr.LastIndexOf('.')) 
                              into ws 
                   where ws.Count() > 2 
                   select ws; 
 
    // Execute the query and display the results. 
    Console.WriteLine("Top-level domains with more than 2 members.\n"); 
 
    foreach(var sites in webAddrs) { 
      Console.WriteLine("Contents of " + sites.Key + " domain:"); 
      foreach(var site in sites) 
        Console.WriteLine("  " + site); 
      Console.WriteLine(); 
    } 
  }  
}

listing 13
// Use a let clause and a nested from clause. 
using System;  
using System.Linq;  
 
class LetDemo { 
 
  static void Main() {  
 
    string[] strs = { "alpha", "beta", "gamma" }; 
 
    // Create a query that obtains the characters in the 
    // strings, returned in sorted order. Notice the use 
    // of a nested from clause. 
    var chrs = from str in strs 
               let chrArray = str.ToCharArray() 
                  from ch in chrArray 
                  orderby ch 
                  select ch; 
 
    Console.WriteLine("The individual characters in sorted order:"); 
 
    // Execute the query and display the results. 
    foreach(char c in chrs) Console.Write(c + " "); 
 
    Console.WriteLine(); 
  }  
}

listing 14
var webAddrs = from addr in websites 
               let idx = addr.LastIndexOf('.') 
               where idx != -1 
               group addr by addr.Substring(idx) 
                          into ws 
               where ws.Count() > 2 
               select ws;

listing 15
// Demonstrate join. 
using System;  
using System.Linq;  
 
// A class that links an item name with its number. 
class Item { 
  public string Name { get; set; } 
  public int ItemNumber { get; set; } 
 
  public Item(string n, int inum) { 
    Name = n; 
    ItemNumber = inum; 
  } 
} 
  
// A class that links an item number with its in-stock status. 
class InStockStatus { 
  public int ItemNumber { get; set; } 
  public bool InStock { get; set; } 
 
  public InStockStatus(int n, bool b) { 
    ItemNumber = n; 
    InStock = b; 
  } 
} 
 
// A class that encapsulates a name with its status. 
class Temp { 
  public string Name { get; set; } 
  public bool InStock { get; set; } 
 
  public Temp(string n, bool b) { 
    Name = n; 
    InStock  = b; 
  } 
} 
 
class JoinDemo { 
  static void Main() {  
 
    Item[] items = { 
         new Item("Pliers", 1424), 
         new Item("Hammer", 7892), 
         new Item("Wrench", 8534), 
         new Item("Saw", 6411) 
    }; 
 
    InStockStatus[] statusList = { 
         new InStockStatus(1424, true), 
         new InStockStatus(7892, false), 
         new InStockStatus(8534, true), 
         new InStockStatus(6411, true) 
    }; 
 
 
    // Create a query that joins Item with InStockStatus to 
    // produce a list of item names and availability. Notice 
    // that a sequence of Temp objects is produced. 
    var inStockList = from item in items 
                      join entry in statusList 
                        on item.ItemNumber equals entry.ItemNumber 
                      select new Temp(item.Name, entry.InStock); 
 
    Console.WriteLine("Item\tAvailable\n"); 
 
    // Execute the query and display the results. 
    foreach(Temp t in inStockList)  
      Console.WriteLine("{0}\t{1}", t.Name, t.InStock); 
  }  
}

listing 16
// Use an anonymous type to improve the join demo program. 
using System;  
using System.Linq;  
 
// A class that links an item name with its number. 
class Item { 
  public string Name { get; set; } 
  public int ItemNumber { get; set; } 
 
  public Item(string n, int inum) { 
    Name = n; 
    ItemNumber = inum; 
  } 
} 
  
// A class that links an item number with its in-stock status. 
class InStockStatus { 
  public int ItemNumber { get; set; } 
  public bool InStock { get; set; } 
 
  public InStockStatus(int n, bool b) { 
    ItemNumber = n; 
    InStock = b; 
  } 
} 
 
class AnonTypeDemo { 
  static void Main() {  
 
    Item[] items = { 
         new Item("Pliers", 1424), 
         new Item("Hammer", 7892), 
         new Item("Wrench", 8534), 
         new Item("Saw", 6411) 
    }; 
 
    InStockStatus[] statusList = { 
         new InStockStatus(1424, true), 
         new InStockStatus(7892, false), 
         new InStockStatus(8534, true), 
         new InStockStatus(6411, true) 
    }; 
 
    // Create a query that joins Item with InStockStatus to 
    // produce a list of item names and availability.  
    // Now, an anonymous type is used. 
    var inStockList = from item in items 
                      join entry in statusList 
                        on item.ItemNumber equals entry.ItemNumber 
                      select new { Name = item.Name, 
                                   InStock =  entry.InStock }; 
 
    Console.WriteLine("Item\tAvailable\n"); 
 
    // Execute the query and display the results. 
    foreach(var t in inStockList)  
      Console.WriteLine("{0}\t{1}", t.Name, t.InStock); 
  }  
}

listing 17
// Demonstrate a simple group join. 
using System;  
using System.Linq;  
 
// This class links the name of a transport, such as Train, 
// with its general classification, such as land, sea , or air. 
class Transport { 
  public string Name { get; set; } 
  public string How { get; set; } 
 
  public Transport(string n, string h) { 
    Name = n; 
    How = h; 
  } 
} 
 
class GroupJoinDemo { 
  static void Main() {  
 
    // An array of transport classifications. 
    string[] travelTypes = { 
         "Air", 
         "Sea", 
         "Land" 
    }; 
 
    // An array of transports. 
    Transport[] transports = { 
         new Transport("Bicycle", "Land"), 
         new Transport("Balloon", "Air"), 
         new Transport("Boat", "Sea"), 
         new Transport("Jet", "Air"), 
         new Transport("Canoe", "Sea"), 
         new Transport("Biplane", "Air"), 
         new Transport("Car", "Land"), 
         new Transport("Cargo Ship", "Sea"), 
         new Transport("Train", "Land") 
    }; 
 
    // Create a query that uses a group join to produce 
    // a list of item names and IDs organized by category. 
    var byHow = from how in travelTypes 
                       join trans in transports 
                       on how equals trans.How 
                       into lst 
                     select new { How = how, Tlist = lst }; 
 
    // Execute the query and display the results. 
    foreach(var t in byHow) { 
      Console.WriteLine("{0} transportation includes:", t.How); 
 
      foreach(var m in t.Tlist) 
        Console.WriteLine("  " + m.Name); 
 
      Console.WriteLine(); 
    } 
  }  
}

listing 18
// Use the query methods to create a simple query. 
// This is a reworked version of the first program in this chapter. 
using System;  
using System.Linq;  
 
class SimpQuery { 
  static void Main() {  
 
    int[] nums =  { 1, -2, 3, 0, -4, 5 }; 
 
    // Use Where() and Select() to create a simple query. 
    var posNums = nums.Where(n => n > 0).Select(r => r); 
 
    Console.Write("The positive values in nums: "); 
 
    // Execute the query and display the results. 
    foreach(int i in posNums) Console.Write(i + " "); 
    Console.WriteLine(); 
  }  
}

listing 19
// Demonstrate the GroupBy() query method. 
// This program reworks the earlier version that used 
// the query syntax. 
using System;  
using System.Linq;  
 
class GroupByDemo { 
 
  static void Main() {  
 
    string[] websites = { "hsNameA.com", "hsNameB.net", "hsNameC.net", 
                          "hsNameD.com", "hsNameE.org", "hsNameF.org", 
                          "hsNameG.tv",  "hsNameH.net", "hsNameI.tv" }; 
 
    // Use query methods to group web sites by top-level domain name. 
    var webAddrs = websites.Where(w => w.LastIndexOf('.') != 1). 
           GroupBy(x => x.Substring(x.LastIndexOf('.'))); 
 
    // Execute the query and display the results. 
    foreach(var sites in webAddrs) { 
      Console.WriteLine("Web sites grouped by " + sites.Key); 
      foreach(var site in sites) 
        Console.WriteLine("  " + site); 
      Console.WriteLine(); 
    } 
  }  
}

listing 20
// Use several of the extension methods defined by Enumerable. 
using System;  
using System.Linq;  
  
class ExtMethods { 
  static void Main() {  
 
    int[] nums =  { 3, 1, 2, 5, 4 }; 
 
    Console.WriteLine("The minimum value is " + nums.Min()); 
    Console.WriteLine("The maximum value is " + nums.Max()); 
 
    Console.WriteLine("The first value is " + nums.First()); 
    Console.WriteLine("The last value is " + nums.Last()); 
 
    Console.WriteLine("The sum is " + nums.Sum()); 
    Console.WriteLine("The average is " + nums.Average()); 
 
    if(nums.All(n => n > 0)) 
      Console.WriteLine("All values are greater than zero."); 
 
    if(nums.Any(n => (n % 2) == 0)) 
      Console.WriteLine("At least one value is even."); 
 
    if(nums.Contains(3)) 
      Console.WriteLine("The array contains 3."); 
  }  
}

listing 21
// Use Average() with the query syntax. 
using System;  
using System.Linq;  
  
class ExtMethods2 { 
  static void Main() {  
 
    int[] nums =  { 1, 2, 4, 8, 6, 9, 10, 3, 6, 7 }; 
 
    var ltAvg = from n in nums 
                let x = nums.Average() 
                where n < x 
                select n; 
 
    Console.WriteLine("The average is " + nums.Average()); 
 
    Console.Write("These values are less than the average: "); 
 
    // Execute the query and display the results. 
    foreach(int i in ltAvg) Console.Write(i + " "); 
 
    Console.WriteLine(); 
  }  
}

listing 22
// Use immmediate execution. 
using System;  
using System.Linq;  
 
class ImmediateExec { 
  static void Main() {  
 
    int[] nums =  { 1, -2, 3, 0, -4, 5 }; 
 
    // Create a query that obtains the number of positive 
    // values in nums. 
    int len = (from n in nums 
               where n > 0 
               select n).Count(); 
 
    Console.WriteLine("The number of positive values in nums: " + len); 
  }  
}

listing 23
// A simple expression tree. 
using System;  
using System.Linq;  
using System.Linq.Expressions;  
 
class SimpleExpTree { 
  static void Main() {  
 
    // Represent a lambda expression as data. 
    Expression<Func<int, int, bool>>  
      IsFactorExp = (n, d) => (d != 0) ? (n % d) == 0 : false;  
 
    // Compile the expression data into executable code. 
    Func<int, int, bool> IsFactor = IsFactorExp.Compile(); 
 
    // Execute the expression. 
    if(IsFactor(10, 5))  
      Console.WriteLine("5 is a factor of 10."); 
 
    if(!IsFactor(10, 7))  
      Console.WriteLine("7 is not a factor of 10."); 
 
    Console.WriteLine(); 
  }  
}

listing 24
// Create and use some extension methods. 
using System;  
using System.Globalization;
  
static class MyExtMeths { 
 
  // Return the reciprocal of a double. 
  public static double Reciprocal(this double v) { 
    return 1.0 / v; 
  } 
 
  // Reverse the case of letters within a string and 
  // return th result. 
  public static string RevCase(this string str) { 
    string temp = ""; 
 
    foreach(char ch in str) { 
      if(Char.IsLower(ch)) temp +=
         Char.ToUpper(ch, CultureInfo.CurrentCulture); 
      else temp += Char.ToLower(ch, CultureInfo.CurrentCulture); 
    } 
    return temp; 
  } 
 
  // Return the absolute value of n / d.  
  public static double AbsDivideBy(this double n, double d) { 
    return Math.Abs(n / d); 
  } 
} 
 
class ExtDemo { 
  static void Main() {  
    double val = 8.0; 
    string str = "Alpha Beta Gamma"; 
 
    // Call the Recip() extension method. 
    Console.WriteLine("Reciprocal of {0} is {1}", 
                      val, val.Reciprocal()); 
 
    // Call the RevCase() extension method. 
    Console.WriteLine(str + " after reversing case is " +  
                      str.RevCase()); 
 
    // Use AbsDivideBy(); 
    Console.WriteLine("Result of val.AbsDivideBy(-2): " +  
                      val.AbsDivideBy(-2)); 
  }  
}