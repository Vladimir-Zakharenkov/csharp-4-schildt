listing 1
// Read a character from the keyboard. 
 
using System; 
 
class KbIn {   
  static void Main() { 
    char ch; 
 
    Console.Write("Press a key followed by ENTER: "); 
 
    ch = (char) Console.Read(); // get a char 
    
    Console.WriteLine("Your key is: " + ch); 
  }   
}

listing 2
// Input from the console using ReadLine(). 
 
using System;  
  
class ReadString { 
  static void Main() { 
    string str; 
 
    Console.WriteLine("Enter some characters."); 
    str = Console.ReadLine(); 
    Console.WriteLine("You entered: " + str); 
  } 
}

listing 3
// Read a string from the keyboard, using Console.In directly.  
 
using System;  
 
class ReadChars2 { 
  static void Main() { 
    string str; 
 
    Console.WriteLine("Enter some characters."); 
 
    str = Console.In.ReadLine(); // call TextReader's ReadLine() method 
 
    Console.WriteLine("You entered: " + str); 
  } 
}

listing 4
// Read keystrokes from the console by using ReadKey(). 
  
using System;  
  
class ReadKeys {    
  static void Main() {  
    ConsoleKeyInfo keypress; 
  
    Console.WriteLine("Enter keystrokes. Enter Q to stop."); 
  
    do { 
      keypress = Console.ReadKey(); // read keystrokes 
     
      Console.WriteLine(" Your key is: " + keypress.KeyChar);  
 
      // Check for modifier keys. 
      if((ConsoleModifiers.Alt & keypress.Modifiers) != 0) 
        Console.WriteLine("Alt key pressed."); 
      if((ConsoleModifiers.Control & keypress.Modifiers) != 0) 
        Console.WriteLine("Control key pressed."); 
      if((ConsoleModifiers.Shift & keypress.Modifiers) != 0) 
        Console.WriteLine("Shift key pressed."); 
 
    } while(keypress.KeyChar != 'Q'); 
  }    
}

listing 5
// Write to Console.Out and Console.Error. 
 
using System; 
 
class ErrOut { 
  static void Main() { 
    int a=10, b=0; 
    int result; 
 
    Console.Out.WriteLine("This will generate an exception."); 
    try { 
      result = a / b; // generate an exception 
    } catch(DivideByZeroException exc) { 
      Console.Error.WriteLine(exc.Message); 
    } 
  } 
}

listing 6
/* Display a text file.  
  
   To use this program, specify the name of the file that you  
   want to see.  For example, to see a file called TEST.CS,  
   use the following command line.  
  
   ShowFile TEST.CS  
*/  
  
using System;  
using System.IO;   
  
class ShowFile {  
  static void Main(string[] args) {  
    int i;  
    FileStream fin;  
  
    if(args.Length != 1) {   
      Console.WriteLine("Usage: ShowFile File");  
      return;  
    }  
  
    try {  
      fin = new FileStream(args[0], FileMode.Open);  
    } catch(IOException exc) {  
      Console.WriteLine("Cannot Open File");  
      Console.WriteLine(exc.Message);  
      return; // File can't be opened, so stop the program. 
    }  
  
    // Read bytes until EOF is encountered.  
    try {  
 
      do {  
        i = fin.ReadByte();  
        if(i != -1) Console.Write((char) i);  
      } while(i != -1);  
 
    } catch(IOException exc) {  
      Console.WriteLine("Error Reading File");  
      Console.WriteLine(exc.Message);  
    } finally {       
      fin.Close();  
    } 
  }  
}

listing 7
// Display a text file. Compact version. 
   
using System;  
using System.IO;   
  
class ShowFile {  
  static void Main(string[] args) {  
    int i;  
    FileStream fin = null;  
  
    if(args.Length != 1) {   
      Console.WriteLine("Usage: ShowFile File");  
      return;  
    }  
  
    // Use a single try block to open the file and then 
    // read from it. 
    try {  
      fin = new FileStream(args[0], FileMode.Open);  
  
      // Read bytes until EOF is encountered.  
      do {  
        i = fin.ReadByte();  
        if(i != -1) Console.Write((char) i);  
      } while(i != -1);  
    } catch(IOException exc) {  
      Console.WriteLine("I/O Error:\n" + exc.Message);  
    } finally { 
      if(fin != null) fin.Close();  
    } 
  }  
}

listing 8
// Write to a file.  
  
using System;  
using System.IO;   
  
class WriteToFile {  
  static void Main(string[] args) {  
    FileStream fout = null;  
  
    try {  
      // Open output file.  
      fout = new FileStream("test.txt", FileMode.CreateNew);  
  
      // Write the alphabet to the file.  
      for(char c = 'A'; c <= 'Z'; c++)  
        fout.WriteByte((byte) c);  
    } catch(IOException exc) {  
      Console.WriteLine("I/O Error:\n" + exc.Message);  
    } finally {  
      if(fout != null) fout.Close();  
    } 
  }  
}

listing 9
/* Copy a file.  
  
   To use this program, specify the name of the source  
   file and the destination file. For example, to copy a  
   file called FIRST.DAT to a file called SECOND.DAT, use  
   the following command line:  
  
   CopyFile FIRST.DAT SECOND.DAT  
*/  
  
using System;  
using System.IO;   
  
class CopyFile {  
  static void Main(string[] args) {  
    int i;  
    FileStream fin = null;  
    FileStream fout = null;  
  
    if(args.Length != 2) {  
      Console.WriteLine("Usage: CopyFile From To");  
      return;  
    }  
  
    try {  
 
      // Open the files. 
      fin = new FileStream(args[0], FileMode.Open);  
      fout = new FileStream(args[1], FileMode.Create);  
  
      // Copy the file. 
      do {  
        i = fin.ReadByte();  
        if(i != -1) fout.WriteByte((byte)i);  
      } while(i != -1);  
 
    } catch(IOException exc) {  
      Console.WriteLine("I/O Error:\n" + exc.Message);  
    } finally {  
      if(fin != null) fin.Close();  
      if(fout != null) fout.Close();  
    } 
  }  
}

listing 10
// A simple key-to-disk utility that demonstrates a StreamWriter.  
  
using System;  
using System.IO;  
   
class KtoD {  
  static void Main() {  
    string str;  
    FileStream fout;  
  
    // First, open the file stream. 
    try {  
      fout = new FileStream("test.txt", FileMode.Create);  
    }  
    catch(IOException exc) {  
      Console.WriteLine("Error Opening File:\n" + exc.Message);  
      return ;  
    } 
  
    // Wrap the file stream in a StreamReader. 
    StreamWriter fstr_out = new StreamWriter(fout);  
  
    try { 
      Console.WriteLine("Enter text ('stop' to quit).");  
 
      do {  
        Console.Write(": ");  
        str = Console.ReadLine();  
  
        if(str != "stop") {  
          str = str + "\r\n"; // add newline  
          fstr_out.Write(str);  
        } 
      } while(str != "stop");  
    } catch(IOException exc) {  
      Console.WriteLine("I/O Error:\n" + exc.Message);  
    } finally { 
      fstr_out.Close(); 
    }   
  }  
}

listing 11
// Open a file using StreamWriter. 
  
using System;  
using System.IO;  
   
class KtoD {  
  static void Main() {  
    string str;  
    StreamWriter fstr_out = null;  
  
    try { 
      // Open the file, wrapped in a StreamWriter. 
      fstr_out = new StreamWriter("test.txt");  
 
      Console.WriteLine("Enter text ('stop' to quit).");  
 
      do {  
        Console.Write(": ");  
        str = Console.ReadLine();  
  
        if(str != "stop") {  
          str = str + "\r\n"; // add newline  
          fstr_out.Write(str);  
        } 
      } while(str != "stop");  
    } catch(IOException exc) {  
      Console.WriteLine("I/O Error:\n" + exc.Message);  
    } finally { 
      if(fstr_out != null) fstr_out.Close(); 
    }   
  }  
}

listing 12
// A simple disk-to-screen utility that demonstrates a FileReader.  
  
using System;  
using System.IO;   
  
class DtoS {  
  static void Main() {  
    FileStream fin;  
    string s;  
  
    try {  
      fin = new FileStream("test.txt", FileMode.Open);  
    }  
    catch(IOException exc) {  
      Console.WriteLine("Error Opening file:\n" + exc.Message);  
      return ;  
    }   
  
    StreamReader fstr_in = new StreamReader(fin);  
  
    try {  
      while((s = fstr_in.ReadLine()) != null) {  
        Console.WriteLine(s);  
      }  
    } catch(IOException exc) {  
      Console.WriteLine("I/O Error:\n" + exc.Message);  
    } finally { 
      fstr_in.Close(); 
    }   
  }  
}

listing 13
using System;  
 
class Test { 
  static void Main() { 
    Console.WriteLine("This is a test."); 
  } 
}

listing 14
// Redirect Console.Out.  
  
using System;   
using System.IO;  
   
class Redirect {  
  static void Main() {  
    StreamWriter log_out = null;  
  
    try {  
      log_out = new StreamWriter("logfile.txt");  
 
      // Redirect standard out to logfile.txt.  
      Console.SetOut(log_out);  
 
      Console.WriteLine("This is the start of the log file.");  
  
      for(int i=0; i<10; i++) Console.WriteLine(i);  
  
      Console.WriteLine("This is the end of the log file.");  
    } catch(IOException exc) {  
        Console.WriteLine("I/O Error\n" + exc.Message);  
    } finally { 
      if(log_out != null) log_out.Close();  
    } 
  }  
}

listing 15
// Write and then read back binary data. 
 
using System; 
using System.IO;  
 
class RWData { 
  static void Main() { 
    BinaryWriter dataOut; 
    BinaryReader dataIn; 
 
    int i = 10; 
    double d = 1023.56; 
    bool b = true; 
    string str = "This is a test"; 
  
    // Open the file for output. 
    try { 
      dataOut = new 
        BinaryWriter(new FileStream("testdata", FileMode.Create)); 
    } 
    catch(IOException exc) { 
      Console.WriteLine("Error Opening File:\n" + exc.Message); 
      return; 
    } 
 
    // Write data to a file. 
    try { 
      Console.WriteLine("Writing " + i); 
      dataOut.Write(i);  
 
      Console.WriteLine("Writing " + d); 
      dataOut.Write(d); 
 
      Console.WriteLine("Writing " + b); 
      dataOut.Write(b); 
 
      Console.WriteLine("Writing " + 12.2 * 7.4); 
      dataOut.Write(12.2 * 7.4); 
 
      Console.WriteLine("Writing " + str); 
      dataOut.Write(str); 
    } 
    catch(IOException exc) { 
      Console.WriteLine("I/O Error:\n" + exc.Message); 
    } finally { 
      dataOut.Close(); 
    } 
 
    Console.WriteLine(); 
 
    // Now, read the data. 
    try { 
      dataIn = new 
          BinaryReader(new FileStream("testdata", FileMode.Open)); 
    } 
    catch(IOException exc) { 
      Console.WriteLine("Error Opening File:\n" + exc.Message); 
      return; 
    } 
 
    try { 
      i = dataIn.ReadInt32(); 
      Console.WriteLine("Reading " + i); 
 
      d = dataIn.ReadDouble(); 
      Console.WriteLine("Reading " + d); 
 
      b = dataIn.ReadBoolean(); 
      Console.WriteLine("Reading " + b); 
 
      d = dataIn.ReadDouble(); 
      Console.WriteLine("Reading " + d); 
 
      str = dataIn.ReadString(); 
      Console.WriteLine("Reading " + str); 
    } 
    catch(IOException exc) { 
      Console.WriteLine("I/O Error:\n" + exc.Message); 
    } finally { 
      dataIn.Close();  
    } 
  } 
}

listing 16
/* Use BinaryReader and BinaryWriter to implement  
   a simple inventory program. */  
  
using System;  
using System.IO;   
  
class Inventory {  
  static void Main() {  
    BinaryWriter dataOut;  
    BinaryReader dataIn;  
  
    string item; // name of item  
    int onhand;  // number on hand  
    double cost; // cost  
  
    try {  
      dataOut = new  
        BinaryWriter(new FileStream("inventory.dat", FileMode.Create));  
    }  
    catch(IOException exc) {  
      Console.WriteLine("Cannot Open Inventory File For Output");  
      Console.WriteLine("Reason: " + exc.Message);  
      return;  
    }  
  
    // Write some inventory data to the file.  
    try {  
      dataOut.Write("Hammers");   
      dataOut.Write(10);  
      dataOut.Write(3.95);  
  
      dataOut.Write("Screwdrivers");   
      dataOut.Write(18);  
      dataOut.Write(1.50);  
  
      dataOut.Write("Pliers");   
      dataOut.Write(5);  
      dataOut.Write(4.95);  
  
      dataOut.Write("Saws");   
      dataOut.Write(8);  
      dataOut.Write(8.95);  
    }  
    catch(IOException exc) {  
      Console.WriteLine("Error Writing Inventory File");  
      Console.WriteLine("Reason: " + exc.Message);  
    } finally { 
      dataOut.Close();  
    } 
 
    Console.WriteLine();  
  
    // Now, open inventory file for reading.  
    try {  
      dataIn = new  
          BinaryReader(new FileStream("inventory.dat", FileMode.Open));  
    }  
    catch(IOException exc) {  
      Console.WriteLine("Cannot Open Inventory File For Input");  
      Console.WriteLine("Reason: " + exc.Message);  
      return;  
    }  
  
    // Lookup item entered by user.  
    Console.Write("Enter item to lookup: ");  
    string what = Console.ReadLine();  
    Console.WriteLine();  
  
    try {  
      for(;;) {  
        // Read an inventory entry.  
        item = dataIn.ReadString();  
        onhand = dataIn.ReadInt32();  
        cost = dataIn.ReadDouble();  
  
        // See if the item matches the one requested.  
        // If so, display information.  
        if(item.Equals(what, StringComparison.OrdinalIgnoreCase)) {  
          Console.WriteLine(onhand + " " + item + " on hand. " +  
                            "Cost: {0:C} each", cost);  
          Console.WriteLine("Total value of {0}: {1:C}." ,  
                            item, cost * onhand);  
          break;  
        }  
      }  
    }  
    catch(EndOfStreamException) {  
      Console.WriteLine("Item not found.");  
    }  
    catch(IOException exc) {  
      Console.WriteLine("Error Reading Inventory File");  
      Console.WriteLine("Reason: " + exc.Message);  
    } finally { 
      dataIn.Close();   
    } 
  }  
}

listing 17
// Demonstrate random access.  
  
using System;  
using System.IO;   
  
class RandomAccessDemo {  
  static void Main() {  
    FileStream f = null;  
    char ch; 
  
    try {  
      f = new FileStream("random.dat", FileMode.Create);  
  
      // Write the alphabet.   
      for(int i=0; i < 26; i++)  
        f.WriteByte((byte)('A'+i));  
 
      // Now, read back specific values.  
      f.Seek(0, SeekOrigin.Begin); // seek to first byte  
      ch = (char) f.ReadByte();  
      Console.WriteLine("First value is " + ch);  
  
      f.Seek(1, SeekOrigin.Begin); // seek to second byte  
      ch = (char) f.ReadByte();  
      Console.WriteLine("Second value is " + ch);  
  
      f.Seek(4, SeekOrigin.Begin); // seek to 5th byte  
      ch = (char) f.ReadByte();  
      Console.WriteLine("Fifth value is " + ch);  
  
      Console.WriteLine();  
  
      // Now, read every other value.  
      Console.WriteLine("Here is every other value: ");  
      for(int i=0; i < 26; i += 2) {  
        f.Seek(i, SeekOrigin.Begin); // seek to ith character  
        ch = (char) f.ReadByte();  
        Console.Write(ch + " ");  
      }  
    }   
    catch(IOException exc) {  
      Console.WriteLine("I/O Error\n" + exc.Message);  
    } finally { 
      if(f != null) f.Close(); 
    } 
   
    Console.WriteLine();  
  }  
}

listing 18
// Demonstrate MemoryStream.  
  
using System;  
using System.IO;  
    
class MemStrDemo {    
  static void Main() {    
    byte[] storage = new byte[255];  
  
    // Create a memory-based stream.  
    MemoryStream memstrm = new MemoryStream(storage);  
  
    // Wrap memstrm in a reader and a writer.  
    StreamWriter memwtr = new StreamWriter(memstrm);  
    StreamReader memrdr = new StreamReader(memstrm);  
 
    try {  
      // Write to storage, through memwtr.  
      for(int i=0; i < 10; i++)  
         memwtr.WriteLine("byte [" + i + "]: " + i);  
  
      // Put a period at the end.  
      memwtr.WriteLine(".");  
  
      memwtr.Flush();  
  
      Console.WriteLine("Reading from storage directly: ");  
  
      // Display contents of storage directly.  
      foreach(char ch in storage) {  
        if (ch == '.') break;  
        Console.Write(ch);  
      }  
  
      Console.WriteLine("\nReading through memrdr: ");  
  
      // Read from memstrm using the stream reader.  
      memstrm.Seek(0, SeekOrigin.Begin); // reset file pointer   
  
      string str = memrdr.ReadLine();  
      while(str != null) {  
        str = memrdr.ReadLine();  
        if(str[0] == '.') break;  
        Console.WriteLine(str);  
      } 
    } catch(IOException exc) { 
      Console.WriteLine("I/O Error\n" + exc.Message); 
    } finally { 
      // Release reader and writer resources. 
      memwtr.Close(); 
      memrdr.Close(); 
    } 
  }   
}


listing 19
// Demonstrate StringReader and StringWriter  
  
using System;  
using System.IO;  
    
class StrRdrWtrDemo {    
  static void Main() {    
    StringWriter strwtr = null; 
    StringReader strrdr = null;  
  
    try { 
      // Create a StringWriter. 
      strwtr = new StringWriter();  
 
      // Write to StringWriter.  
      for(int i=0; i < 10; i++)  
        strwtr.WriteLine("This is i: " + i);  
  
      // Create a StringReader  
      strrdr = new StringReader(strwtr.ToString());  
  
      // Now, read from StringReader.  
      string str = strrdr.ReadLine();  
      while(str != null) {  
        str = strrdr.ReadLine();  
        Console.WriteLine(str);  
      } 
    } catch(IOException exc) { 
      Console.WriteLine("I/O Error\n" + exc.Message); 
    } finally { 
      // Release reader and writer resources. 
      if(strrdr != null) strrdr.Close(); 
      if(strwtr != null) strwtr.Close(); 
    }   
  }   
}

listing 20
/* Copy a file using File.Copy(). 
  
   To use this program, specify the name of the source  
   file and the destination file. For example, to copy a  
   file called FIRST.DAT to a file called SECOND.DAT, use  
   the following command line:  
  
   CopyFile FIRST.DAT SECOND.DAT  
*/  
  
using System;  
using System.IO;   
  
class CopyFile {  
  static void Main(string[] args) {  
 
    if(args.Length != 2) {  
      Console.WriteLine("Usage: CopyFile From To");  
      return;  
    }  
  
    // Copy the Files. 
    try {  
      File.Copy(args[0], args[1]); 
    } catch(IOException exc) {  
      Console.WriteLine("Error Copying File\n" + exc.Message);  
    }  
  }  
}

listing 21
// Use Exists() and GetLastAccessTime(). 
using System;  
using System.IO;   
  
class ExistsDemo {  
  static void Main() {  
   
    if(File.Exists("test.txt")) 
      Console.WriteLine("File exists. It was last accessed at " + 
                        File.GetLastAccessTime("test.txt")); 
    else 
      Console.WriteLine("Does Not Exist"); 
  }  
}

listing 22
// This program averages a list of numbers entered by the user. 
 
using System; 
using System.IO;  
  
class AvgNums {  
  static void Main() {  
    string str;  
    int n;  
    double sum = 0.0; 
    double avg, t;  
      
    Console.Write("How many numbers will you enter: ");  
    str = Console.ReadLine(); 
    try { 
      n = Int32.Parse(str); 
    } catch(FormatException exc) { 
      Console.WriteLine(exc.Message); 
      return; 
    } catch(OverflowException exc) { 
      Console.WriteLine(exc.Message); 
      return; 
    } 
    
    Console.WriteLine("Enter " + n + " values."); 
    for(int i=0; i < n ; i++)  {  
      Console.Write(": "); 
      str = Console.ReadLine();  
      try {  
        t = Double.Parse(str);  
      } catch(FormatException exc) {  
        Console.WriteLine(exc.Message);  
        t = 0.0;  
      } catch(OverflowException exc) { 
        Console.WriteLine(exc.Message); 
        t = 0; 
      } 
      sum += t;  
    }  
    avg = sum / n; 
    Console.WriteLine("Average is " + avg); 
  }  
}

