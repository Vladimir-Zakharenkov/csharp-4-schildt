listing 1
public interface ISeries { 
  int GetNext(); // return next number in series 
  void Reset(); // restart 
  void SetStart(int x); // set starting value 
}

listing 2
// Implement ISeries. 
class ByTwos : ISeries { 
  int start; 
  int val; 
 
  public ByTwos() { 
    start = 0; 
    val = 0; 
  }  
 
  public int GetNext() { 
    val += 2; 
    return val; 
  } 
 
  public void Reset() { 
    val = start; 
  } 
 
  public void SetStart(int x) { 
    start = x; 
    val = start; 
  } 
}

listing 3
// Demonstrate the ByTwos interface. 
 
using System; 
 
class SeriesDemo { 
  static void Main() { 
    ByTwos ob = new ByTwos(); 
 
    for(int i=0; i < 5; i++) 
      Console.WriteLine("Next value is " + 
                         ob.GetNext()); 
 
    Console.WriteLine("\nResetting"); 
    ob.Reset(); 
    for(int i=0; i < 5; i++) 
      Console.WriteLine("Next value is " + 
                         ob.GetNext()); 
 
    Console.WriteLine("\nStarting at 100"); 
    ob.SetStart(100); 
    for(int i=0; i < 5; i++) 
      Console.WriteLine("Next value is " + 
                         ob.GetNext()); 
  } 
}

listing 4
// Implement ISeries and add GetPrevious(). 
 class ByTwos : ISeries { 
  int start; 
  int val; 
  int prev; 
 
  public ByTwos() { 
    start = 0; 
    val = 0; 
    prev = -2; 
  }  
 
  public int GetNext() { 
    prev = val; 
    val += 2; 
    return val; 
  } 
 
  public void Reset() { 
    val = start; 
    prev = start - 2; 
  } 
 
  public void SetStart(int x) { 
    start = x; 
    val = start; 
    prev = val - 2; 
  } 
 
  // A method not specified by ISeries. 
  public int GetPrevious() { 
    return prev; 
  } 
}

listing 5
// Use ISeries to implement a series of prime numbers.  
class Primes : ISeries {  
  int start;  
  int val;  
  
  public Primes() {  
    start = 2;  
    val = 2;  
  }   
  
  public int GetNext() {  
    int i, j; 
    bool isprime; 
 
    val++; 
    for(i = val; i < 1000000; i++) { 
      isprime = true; 
      for(j = 2; j <= i/j; j++) { 
        if((i%j)==0) { 
          isprime = false; 
          break; 
        } 
      } 
      if(isprime) { 
        val = i; 
        break; 
      } 
    } 
    return val;        
  }  
  
  public void Reset() {  
    val = start;  
  }  
  
  public void SetStart(int x) {  
    start = x;  
    val = start;  
  }  
}

listing 6
// Demonstrate interface references. 
 
using System; 
 
// Define the interface 
public interface ISeries { 
  int GetNext(); // return next number in series 
  void Reset(); // restart 
  void SetStart(int x); // set starting value 
} 
 
// Use ISeries to implement a series in which each 
// value is two greater than the previous one. 
class ByTwos : ISeries { 
  int start; 
  int val; 
 
  public ByTwos() { 
    start = 0; 
    val = 0; 
  }  
 
  public int GetNext() { 
    val += 2; 
    return val; 
  } 
 
  public void Reset() { 
    val = start; 
  } 
 
  public void SetStart(int x) { 
    start = x; 
    val = start; 
  } 
} 
 
// Use ISeries to implement a series of prime numbers.  
class Primes : ISeries {  
  int start;  
  int val;  
  
  public Primes() {  
    start = 2;  
    val = 2;  
  }   
  
  public int GetNext() {  
    int i, j; 
    bool isprime; 
 
    val++; 
    for(i = val; i < 1000000; i++) { 
      isprime = true; 
      for(j = 2; j <= i/j; j++) { 
        if((i%j)==0) { 
          isprime = false; 
          break; 
        } 
      } 
      if(isprime) { 
        val = i; 
        break; 
      } 
    } 
    return val;        
  }  
  
  public void Reset() {  
    val = start;  
  }  
  
  public void SetStart(int x) {  
    start = x;  
    val = start;  
  }  
} 
 
class SeriesDemo2 { 
  static void Main() { 
    ByTwos twoOb = new ByTwos(); 
    Primes primeOb = new Primes(); 
    ISeries ob; 
 
    for(int i=0; i < 5; i++) { 
      ob = twoOb; 
      Console.WriteLine("Next ByTwos value is " + 
                          ob.GetNext()); 
      ob = primeOb; 
      Console.WriteLine("Next prime number is " + 
                          ob.GetNext()); 
    } 
  } 
}

listing 7
// Use a property in an interface. 
 
using System; 
 
public interface ISeries { 
  // An interface property. 
  int Next { 
    get; // return the next number in series 
    set; // set next number 
  } 
} 
 
// Implement ISeries. 
class ByTwos : ISeries { 
  int val; 
 
  public ByTwos() { 
    val = 0; 
  }  
 
  // Get or set value. 
  public int Next { 
    get {  
      val += 2; 
      return val; 
    } 
    set { 
      val = value; 
    } 
  } 
} 
 
// Demonstrate an interface property. 
class SeriesDemo3 { 
  static void Main() { 
    ByTwos ob = new ByTwos(); 
 
    // Access series through a property. 
    for(int i=0; i < 5; i++) 
      Console.WriteLine("Next value is " + ob.Next); 
 
    Console.WriteLine("\nStarting at 21"); 
    ob.Next = 21; 
    for(int i=0; i < 5; i++) 
      Console.WriteLine("Next value is " + ob.Next); 
  } 
}

listing 8
// Add an indexer in an interface. 
 
using System; 
 
public interface ISeries { 
  // An interface property. 
  int Next { 
    get; // return the next number in series 
    set; // set next number 
  } 
 
  // An interface indexer. 
  int this[int index] { 
    get; // return the specified number in series 
  } 
} 
 
// Implement ISeries. 
class ByTwos : ISeries { 
  int val; 
 
  public ByTwos() { 
    val = 0; 
  }  
 
  // Get or set value using a property. 
  public int Next { 
    get {  
      val += 2; 
      return val; 
    } 
    set { 
      val = value; 
    } 
  } 
 
  // Get a value using an index. 
  public int this[int index] { 
    get {  
      val = 0; 
      for(int i=0; i<index; i++) 
        val += 2; 
      return val; 
    } 
  } 
} 
 
// Demonstrate an interface indexer. 
class SeriesDemo4 { 
  static void Main() { 
    ByTwos ob = new ByTwos(); 
 
    // Access series through a property. 
    for(int i=0; i < 5; i++) 
      Console.WriteLine("Next value is " + ob.Next); 
 
    Console.WriteLine("\nStarting at 21"); 
    ob.Next = 21; 
    for(int i=0; i < 5; i++) 
      Console.WriteLine("Next value is " + 
                         ob.Next); 
 
    Console.WriteLine("\nResetting to 0"); 
    ob.Next = 0; 
 
    // Access series through an indexer. 
    for(int i=0; i < 5; i++) 
      Console.WriteLine("Next value is " + ob[i]); 
  } 
}

listing 9
// One interface can inherit another. 
 
using System; 
 
public interface IA { 
  void Meth1(); 
  void Meth2(); 
} 
 
// B now includes Meth1() and Meth2() -- it adds Meth3(). 
public interface IB : IA { 
  void Meth3(); 
} 
 
// This class must implement all of IA and IB 
class MyClass : IB { 
  public void Meth1() { 
    Console.WriteLine("Implement Meth1()."); 
  } 
 
  public void Meth2() { 
    Console.WriteLine("Implement Meth2()."); 
  } 
 
  public void Meth3() { 
    Console.WriteLine("Implement Meth3()."); 
  } 
} 
 
class IFExtend { 
  static void Main() { 
    MyClass ob = new MyClass(); 
 
    ob.Meth1(); 
    ob.Meth2(); 
    ob.Meth3(); 
  } 
}

listing 10
interface IMyIF { 
  int MyMeth(int x); 
}

listing 11
class MyClass : IMyIF { 
  int IMyIF.MyMeth(int x) { 
    return x / 3; 
  } 
}

listing 12
// Explicitly implement an interface member. 
 
using System; 
 
interface IEven { 
  bool IsOdd(int x); 
  bool IsEven(int x); 
} 
 
class MyClass : IEven { 
 
  // Explicit implementation. Notice that this member is private 
  // by default. 
  bool IEven.IsOdd(int x) { 
    if((x%2) != 0) return true; 
    else return false; 
  } 
 
  // Normal implementation. 
  public bool IsEven(int x) { 
    IEven o = this; // Interface reference to the invoking object. 
 
    return !o.IsOdd(x); 
  } 
} 
 
class Demo { 
  static void Main() { 
    MyClass ob = new MyClass(); 
    bool result; 
 
    result = ob.IsEven(4); 
    if(result) Console.WriteLine("4 is even."); 
 
    // result = ob.IsOdd(4); // Error, IsOdd not exposed. 
 
    // But, this is OK. It creates an IEven reference to a MyClass object 
    // and then calls IsOdd() through that reference. 
    IEven iRef = (IEven) ob; 
    result = iRef.IsOdd(3); 
    if(result) Console.WriteLine("3 is odd."); 
 
  } 
}

listing 13
// Use explicit implementation to remove ambiguity. 
 
using System; 
 
interface IMyIF_A { 
  int Meth(int x); 
} 
 
interface IMyIF_B { 
  int Meth(int x); 
} 
 
// MyClass implements both interfaces. 
class MyClass : IMyIF_A, IMyIF_B { 
 
  // Explicitly implement the two Meth()s. 
  int IMyIF_A.Meth(int x) { 
    return x + x; 
  } 
  int IMyIF_B.Meth(int x) { 
    return x * x; 
  } 
 
  // Call Meth() through an interface reference. 
  public int MethA(int x){ 
    IMyIF_A a_ob; 
    a_ob = this; 
    return a_ob.Meth(x); // calls IMyIF_A 
  } 
 
  public int MethB(int x){ 
    IMyIF_B b_ob; 
    b_ob = this; 
    return b_ob.Meth(x); // calls IMyIF_B 
  } 
} 
 
class FQIFNames { 
  static void Main() { 
    MyClass ob = new MyClass(); 
 
    Console.Write("Calling IMyIF_A.Meth(): "); 
    Console.WriteLine(ob.MethA(3)); 
 
    Console.Write("Calling IMyIF_B.Meth(): "); 
    Console.WriteLine(ob.MethB(3)); 
  } 
}

listing 14
// Demonstrate a structure. 
 
using System; 
 
// Define a structure. 
struct Book { 
  public string Author; 
  public string Title; 
  public int Copyright; 
 
  public Book(string a, string t, int c) { 
    Author = a; 
    Title = t; 
    Copyright = c; 
  } 
} 
 
// Demonstrate Book structure. 
class StructDemo { 
  static void Main() { 
    Book book1 = new Book("Herb Schildt", 
                          "C# 4.0: The Complete Reference", 
                          2010); // explicit constructor 
 
    Book book2 = new Book(); // default constructor 
    Book book3; // no constructor 
 
    Console.WriteLine(book1.Title + " by " + book1.Author + 
                      ", (c) " + book1.Copyright); 
    Console.WriteLine(); 
 
    if(book2.Title == null) 
      Console.WriteLine("book2.Title is null."); 
 
    // Now, give book2 some info. 
    book2.Title = "Brave New World"; 
    book2.Author = "Aldous Huxley"; 
    book2.Copyright = 1932; 
    Console.Write("book2 now contains: "); 
    Console.WriteLine(book2.Title + " by " + book2.Author + 
                      ", (c) " + book2.Copyright); 
 
    Console.WriteLine(); 
 
// Console.WriteLine(book3.Title); // error, must initialize first 
    book3.Title = "Red Storm Rising"; 
 
    Console.WriteLine(book3.Title); // now OK 
  } 
}

listing 15
// Copy a struct. 
 
using System; 
 
// Define a structure. 
struct MyStruct { 
  public int x; 
} 
 
// Demonstrate structure assignment. 
class StructAssignment { 
  static void Main() { 
    MyStruct a; 
    MyStruct b; 
 
    a.x = 10; 
    b.x = 20; 
 
    Console.WriteLine("a.x {0}, b.x {1}", a.x, b.x); 
 
    a = b; 
    b.x = 30; 
 
    Console.WriteLine("a.x {0}, b.x {1}", a.x, b.x); 
  } 
}

listing 16
// Copy a class. 
 
using System; 
 
// Define a structure. 
class MyClass { 
  public int x; 
} 
 
// Now show a class object assignment. 
class ClassAssignment { 
  static void Main() { 
    MyClass a = new MyClass(); 
    MyClass b = new MyClass(); 
 
    a.x = 10; 
    b.x = 20; 
 
    Console.WriteLine("a.x {0}, b.x {1}", a.x, b.x); 
 
    a = b; 
    b.x = 30; 
 
    Console.WriteLine("a.x {0}, b.x {1}", a.x, b.x); 
  } 
}

listing 17
// Structures are good when grouping small amounts of data. 
 
using System; 
 
// Define a packet structure. 
struct PacketHeader { 
  public uint PackNum; // packet number 
  public ushort PackLen; // length of packet 
} 
 
// Use PacketHeader to create an e-commerce transaction record. 
class Transaction { 
  static uint transacNum = 0; 
 
  PacketHeader ph;  // incorporate PacketHeader into Transaction 
  string accountNum; 
  double amount; 
 
  public Transaction(string acc, double val) { 
   // create packet header 
    ph.PackNum = transacNum++;  
    ph.PackLen = 512;  // arbitrary length 
 
    accountNum = acc; 
    amount = val; 
  } 
 
  // Simulate a transaction. 
  public void sendTransaction() { 
    Console.WriteLine("Packet #: " + ph.PackNum + 
                      ", Length: " + ph.PackLen + 
                      ",\n    Account #: " + accountNum + 
                      ", Amount: {0:C}\n", amount); 
  } 
} 
 
// Demonstrate Packet 
class PacketDemo { 
  static void Main() { 
    Transaction t = new Transaction("31243", -100.12); 
    Transaction t2 = new Transaction("AB4655", 345.25); 
    Transaction t3 = new Transaction("8475-09", 9800.00); 
 
    t.sendTransaction(); 
    t2.sendTransaction(); 
    t3.sendTransaction(); 
  } 
}

listing 18
// Demonstrate an enumeration. 
 
using System; 
 
class EnumDemo { 
  enum Apple { Jonathan, GoldenDel, RedDel, Winesap, 
               Cortland, McIntosh }; 
 
  static void Main() { 
    string[] color = { 
      "Red", 
      "Yellow", 
      "Red", 
      "Red", 
      "Red", 
      "Reddish Green" 
    }; 
 
    Apple i; // declare an enum variable 
 
    // Use i to cycle through the enum. 
    for(i = Apple.Jonathan; i <= Apple.McIntosh; i++)  
      Console.WriteLine(i + " has value of " + (int)i); 
 
    Console.WriteLine(); 
 
    // Use an enumeration to index an array. 
    for(i = Apple.Jonathan; i <= Apple.McIntosh; i++)  
      Console.WriteLine("Color of " + i + " is " + 
                         color[(int)i]); 
  } 
}

listing 19
// Simulate a conveyor belt 
 
using System; 
 
class ConveyorControl { 
  // Enumerate the conveyor commands. 
  public enum Action { Start, Stop, Forward, Reverse }; 
 
  public void Conveyor(Action com) { 
    switch(com) { 
      case Action.Start: 
        Console.WriteLine("Starting conveyor."); 
        break; 
      case Action.Stop: 
        Console.WriteLine("Stopping conveyor."); 
        break; 
      case Action.Forward: 
        Console.WriteLine("Moving forward."); 
        break; 
      case Action.Reverse: 
        Console.WriteLine("Moving backward."); 
        break; 
    } 
  } 
} 
 
class ConveyorDemo { 
  static void Main() { 
    ConveyorControl c = new ConveyorControl(); 
 
    c.Conveyor(ConveyorControl.Action.Start); 
    c.Conveyor(ConveyorControl.Action.Forward); 
    c.Conveyor(ConveyorControl.Action.Reverse); 
    c.Conveyor(ConveyorControl.Action.Stop); 
     
  } 
}

