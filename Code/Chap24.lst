listing 1
// Create and run a task. 
  
using System;  
using System.Threading; 
using System.Threading.Tasks; 
  
class DemoTask {  
 
  // A method to be run as a task. 
  static void MyTask() {  
    Console.WriteLine("MyTask() starting");  
  
    for(int count = 0; count < 10; count++) { 
      Thread.Sleep(500);  
      Console.WriteLine("In MyTask(), count is " + count);  
    } 
  
    Console.WriteLine("MyTask terminating");  
  }  
 
  static void Main() {  
 
    Console.WriteLine("Main thread starting.");  
 
    // Construct a task. 
    Task tsk = new Task(MyTask); 
 
    // Run the task. 
    tsk.Start(); 
 
    // Keep Main() alive until MyTask() finishes. 
    for(int i = 0; i < 60; i++) { 
      Console.Write(".");  
      Thread.Sleep(100);  
    }  
  
    Console.WriteLine("Main thread ending.");  
  }  
}

listing 2
// Use an instance method as a task. 
  
using System;  
using System.Threading; 
using System.Threading.Tasks; 
 
class MyClass { 
  
  // A method to be run as a task. 
  public void MyTask() {  
    Console.WriteLine("MyTask() starting");  
  
    for(int count = 0; count < 10; count++) { 
      Thread.Sleep(500);  
      Console.WriteLine("In MyTask(), count is " + count);  
    } 
  
    Console.WriteLine("MyTask terminating");  
  }  
} 
 
class DemoTask {  
 
  static void Main() {  
 
    Console.WriteLine("Main thread starting.");  
 
    // Construct a MyClass object. 
    MyClass mc = new MyClass(); 
 
    // Construct a task on mc.MyTask(). 
    Task tsk = new Task(mc.MyTask); 
 
    // Run the task. 
    tsk.Start(); 
 
    // Keep Main() alive until MyTask() finishes. 
    for(int i = 0; i < 60; i++) { 
      Console.Write(".");  
      Thread.Sleep(100);  
    }  
  
    Console.WriteLine("Main thread ending.");  
  }  
}

listing 3
// Demonstrate the Id and CurrentId properties. 
  
using System;  
using System.Threading; 
using System.Threading.Tasks; 
  
class DemoTask {  
 
  // A method to be run as a task. 
  static void MyTask() {  
    Console.WriteLine("MyTask() #" + Task.CurrentId + " starting");  
  
    for(int count = 0; count < 10; count++) { 
      Thread.Sleep(500);  
      Console.WriteLine("In MyTask() #" + Task.CurrentId + 
                        ", count is " + count );  
    } 
  
    Console.WriteLine("MyTask #" + Task.CurrentId + " terminating");  
  }  
 
  static void Main() {  
 
    Console.WriteLine("Main thread starting.");  
 
    // Construct two tasks. 
    Task tsk = new Task(MyTask); 
    Task tsk2 = new Task(MyTask); 
 
    // Run the tasks. 
    tsk.Start(); 
    tsk2.Start(); 
 
    Console.WriteLine("Task ID for tsk is " + tsk.Id); 
    Console.WriteLine("Task ID for tsk2 is " + tsk2.Id); 
 
    // Keep Main() alive until the other tasks finish. 
    for(int i = 0; i < 60; i++) { 
      Console.Write(".");  
      Thread.Sleep(100);  
    }  
  
    Console.WriteLine("Main thread ending.");  
  }  
}

listing 4
// Use Wait(). 
  
using System;  
using System.Threading; 
using System.Threading.Tasks; 
  
class DemoTask {  
 
  // A method to be run as a task. 
  static void MyTask() {  
    Console.WriteLine("MyTask() #" + Task.CurrentId + " starting");  
  
    for(int count = 0; count < 10; count++) { 
      Thread.Sleep(500);  
      Console.WriteLine("In MyTask() #" + Task.CurrentId + 
                        ", count is " + count );  
    } 
  
    Console.WriteLine("MyTask #" + Task.CurrentId + " terminating");  
  }  
 
  static void Main() {  
 
    Console.WriteLine("Main thread starting.");  
 
    // Construct two tasks. 
    Task tsk = new Task(MyTask); 
    Task tsk2 = new Task(MyTask); 
 
    // Run the tasks. 
    tsk.Start(); 
    tsk2.Start(); 
 
    Console.WriteLine("Task ID for tsk is " + tsk.Id); 
    Console.WriteLine("Task ID for tsk2 is " + tsk2.Id); 
 
    // Suspend Main() until both tsk and tsk2 finish. 
    tsk.Wait(); 
    tsk2.Wait(); 
  
    Console.WriteLine("Main thread ending.");  
  }  
}

listing 5
// Use a lambda expression as a task. 
  
using System;  
using System.Threading; 
using System.Threading.Tasks; 
  
class DemoLambdaTask {  
 
  static void Main() {  
 
    Console.WriteLine("Main thread starting.");  
 
    // The following use a lambda expression to define a task. 
    Task tsk = Task.Factory.StartNew( () => { 
      Console.WriteLine("Task starting");  
  
      for(int count = 0; count < 10; count++) { 
        Thread.Sleep(500);  
        Console.WriteLine("Task count is " + count );  
      } 
  
      Console.WriteLine("Task terminating");  
    } ); 
 
 
    // Wait until tsk finishes.  
    tsk.Wait(); 
 
    // Dispose of tsk. 
    tsk.Dispose(); 
 
    Console.WriteLine("Main thread ending.");  
  }  
}

listing 6
// Demonstrate a continuation. 
  
using System;  
using System.Threading; 
using System.Threading.Tasks; 
  
class ContinuationDemo {  
 
  // A method to be run as a task. 
  static void MyTask() {  
    Console.WriteLine("MyTask() starting");  
  
    for(int count = 0; count < 5; count++) { 
      Thread.Sleep(500);  
      Console.WriteLine("In MyTask() count is " + count );  
    } 
  
    Console.WriteLine("MyTask terminating");  
  }  
 
  // A method to be run as a continuation. 
  static void ContTask(Task t) {  
    Console.WriteLine("Continuation starting");  
 
    for(int count = 0; count < 5; count++) { 
      Thread.Sleep(500);  
      Console.WriteLine("Continuation count is " + count );  
    } 
    Console.WriteLine("Continuation terminating");  
  }  
 
  static void Main() {  
 
    Console.WriteLine("Main thread starting.");  
 
    // Construct the first task. 
    Task tsk = new Task(MyTask); 
 
    // Now, create the continuation. 
    Task taskCont = tsk.ContinueWith(ContTask); 
 
    // Begin the task sequence. 
    tsk.Start(); 
 
    // Just wait on the continuation. 
    taskCont.Wait(); 
  
    tsk.Dispose(); 
    taskCont.Dispose(); 
 
    Console.WriteLine("Main thread ending.");  
  }  
}

listing 7
// Return a value from a task. 
  
using System;  
using System.Threading; 
using System.Threading.Tasks; 
  
class DemoTask {  
  
  // A trivial method that returns a result and takes no arguments. 
  static bool MyTask() { 
    return true; 
  } 
 
  // This method returns the summation of a positive integer 
  // which is passed to it. 
  static int SumIt(object v) {  
    int x = (int) v; 
    int sum = 0; 
 
    for(; x > 0; x--) 
      sum += x; 
 
    return sum; 
  }  
 
  static void Main() {  
 
    Console.WriteLine("Main thread starting.");  
 
    // Construct the first task. 
    Task<bool> tsk = Task<bool>.Factory.StartNew(MyTask); 
 
    Console.WriteLine("After running MyTask. The result is " + 
                      tsk.Result); 
 
    // Construct the second task. 
    Task<int> tsk2 = Task<int>.Factory.StartNew(SumIt, 3); 
 
    Console.WriteLine("After running SumIt. The result is " + 
                      tsk2.Result); 
 
    tsk.Dispose(); 
    tsk2.Dispose(); 
  
    Console.WriteLine("Main thread ending.");  
  }  
}

listing 8
// A simple example of cancellation that use polling. 
  
using System;  
using System.Threading; 
using System.Threading.Tasks; 
  
class DemoCancelTask {  
 
  // A method to be run as a task. 
  static void MyTask(Object ct) {  
    CancellationToken cancelTok = (CancellationToken) ct; 
 
    // Check if cancelled prior to starting. 
    cancelTok.ThrowIfCancellationRequested(); 
 
    Console.WriteLine("MyTask() starting");  
  
    for(int count = 0; count < 10; count++) { 
      // This example uses polling to watch for cancellation. 
      if(cancelTok.IsCancellationRequested) {
        Console.WriteLine("Cancellation request received.");
        cancelTok.ThrowIfCancellationRequested(); 
      }

      Thread.Sleep(500);  
      Console.WriteLine("In MyTask(), count is " + count );  
    } 
  
    Console.WriteLine("MyTask terminating");  
  }  
 
  static void Main() {  
 
    Console.WriteLine("Main thread starting.");  
 
    // Create a cancellation token source. 
    CancellationTokenSource cancelTokSrc = new CancellationTokenSource(); 

    // Start a task, passing the cancellation token to both 
    // the delegate and the task. 
    Task tsk = Task.Factory.StartNew(MyTask, cancelTokSrc.Token,  
                                     cancelTokSrc.Token); 
 
    // Let tsk run until cancelled. 
    Thread.Sleep(2000); 
 
    try {  
      // Cancel the task. 
      cancelTokSrc.Cancel(); 
 
      // Suspend Main() until tsk terminates. 
      tsk.Wait(); 
    } catch (AggregateException exc) { 
      if(tsk.IsCanceled) 
        Console.WriteLine("\ntsk Cancelled\n"); 
 
      // To see the exception, un-comment this line: 
      // Console.WriteLine(exc); 
    } finally { 
      tsk.Dispose(); 
      cancelTokSrc.Dispose(); 
    } 
  
    Console.WriteLine("Main thread ending.");  
  }  
}

listing 9
// Use Parallel.Invoke() to execute methods concurrently. 
  
using System;  
using System.Threading; 
using System.Threading.Tasks; 
  
class DemoParallel {  
 
  // A method to be run as a task. 
  static void MyMeth() {  
    Console.WriteLine("MyMeth starting");  
  
    for(int count = 0; count < 5; count++) { 
      Thread.Sleep(500);  
      Console.WriteLine("In MyMeth, count is " + count );  
    } 
  
    Console.WriteLine("MyMeth terminating");  
  }  
 
  // A method to be run as a task. 
  static void MyMeth2() {  
    Console.WriteLine("MyMeth2 starting");  
  
    for(int count = 0; count < 5; count++) { 
      Thread.Sleep(500);  
      Console.WriteLine("In MyMeth2, count is " + count );  
    } 
  
    Console.WriteLine("MyMeth2 terminating");  
  }  
 
  static void Main() {  
 
    Console.WriteLine("Main thread starting.");  
 
    // Run two named methods. 
    Parallel.Invoke(MyMeth, MyMeth2); 
 
    Console.WriteLine("Main thread ending.");  
  }  
}

listing 10
// Use Parallel.Invoke( ) to execute methods concurrently. 
// This version uses lambda expressions. 
  
using System;  
using System.Threading; 
using System.Threading.Tasks; 
  
class DemoParallel {  
 
  static void Main() {  
 
    Console.WriteLine("Main thread starting.");  
 
    // Run two anonymous methods specified via lambda expressions. 
    Parallel.Invoke( () => { 
        Console.WriteLine("Expression #1 starting");  
  
        for(int count = 0; count < 5; count++) { 
          Thread.Sleep(500);  
          Console.WriteLine("Expression #1 count is " + count );  
        } 
  
        Console.WriteLine("Expression #1 terminating");  
      }, 
        
        () => {  
          Console.WriteLine("Expression #2 starting");  
  
          for(int count = 0; count < 5; count++) { 
            Thread.Sleep(500);  
            Console.WriteLine("Expression #2 count is " + count );  
          } 
  
          Console.WriteLine("Expression #2 terminating");  
        }      
    ); 
 
    Console.WriteLine("Main thread ending.");  
  }  
}

listing 11
// Use Parallel.For() to create a data-parallel loop. 
  
using System;  
using System.Threading.Tasks; 
  
class DemoParallelFor {  
  static int[] data; 
 
  // A method to be run as the body of a parallel loop. 
  // The statements in this loop are designed to simply 
  // consume some CPU time for the puposes of demonstration. 
  static void MyTransform(int i) {  
    // So something for demonstration purposes. 
 
    data[i] = data[i] / 10; 
 
    if(data[i] < 10000) data[i] = 0; 
    if(data[i] > 10000 & data[i] < 20000) data[i] = 100; 
    if(data[i] > 20000 & data[i] < 30000) data[i] = 200; 
    if(data[i] > 30000) data[i] = 300; 
  }  
 
  static void Main() {  
 
    Console.WriteLine("Main thread starting.");  
 
    data = new int[100000000]; 
 
    // Initialize the data using a regular for loop. 
    for(int i=0; i < data.Length; i++) data[i] = i; 
 
    // A parallel For loop. 
    Parallel.For(0, data.Length, MyTransform); 
 
    Console.WriteLine("Main thread ending.");  
  }  
}

listing 12
// Show timing differences between sequential and parallel for loops. 
  
using System;  
using System.Threading.Tasks; 
using System.Diagnostics; 
  
class DemoParallelFor {  
  static int[] data; 
 
  // A method to be run as the body of a parallel loop. 
  // The statements in this loop are designed to simply 
  // consume some CPU time for the puposes of demonstration. 
  static void MyTransform(int i) {  
    // So something for demonstration purposes. 
 
    data[i] = data[i] / 10; 
 
    if(data[i] < 1000) data[i] = 0; 
    if(data[i] > 1000 & data[i] < 2000) data[i] = 100; 
    if(data[i] > 2000 & data[i] < 3000) data[i] = 200; 
    if(data[i] > 3000) data[i] = 300; 
  }  
 
  static void Main() {  
 
    Console.WriteLine("Main thread starting.");  
 
    // Create a Stopwatch instance to time loops. 
    Stopwatch sw = new Stopwatch(); 
 
    data = new int[100000000]; 
 
    // Initialize data. 
    sw.Start(); 
 
    // Parallel version of initialization loop. 
    Parallel.For(0, data.Length, (i) => data[i] = i ); 
 
    sw.Stop(); 
 
    Console.WriteLine("Parallel intialization loop:    {0} secs", 
                       sw.Elapsed.TotalSeconds); 
 
    sw.Reset(); 
 
    sw.Start(); 
 
    // Sequential version of initialization loop. 
    for(int i=0; i < data.Length; i++) data[i] = i; 
 
    sw.Stop(); 
 
    Console.WriteLine("Sequential initialization loop: {0} secs", 
                       sw.Elapsed.TotalSeconds); 
    Console.WriteLine(); 
 
    // Perform transforms. 
 
    sw.Start(); 
 
    // Parallel version of transformation loop. 
    Parallel.For(0, data.Length, MyTransform); 
 
    sw.Stop(); 
 
    Console.WriteLine("Parallel transform loop:   {0} secs", 
                       sw.Elapsed.TotalSeconds); 
 
    sw.Reset(); 
 
    sw.Start(); 
 
    // Sequential version of transformation loop. 
    for(int i=0; i < data.Length; i++) MyTransform(i); 
 
    sw.Stop(); 
 
    Console.WriteLine("Sequential transform loop: {0} secs", 
                       sw.Elapsed.TotalSeconds); 
 
    Console.WriteLine("Main thread ending.");  
  }  
}

listing 13
// Use ParallelLoopResult, ParallelLoopState, and Break() 
// with a parallel For loop. 
  
using System;  
using System.Threading.Tasks; 
  
class DemoParallelForWithLoopResult {  
  static int[] data; 
 
  // A method to be run as the body of a parallel loop. 
  // The statements in this loop are designed to simply 
  // consume some CPU time for the puposes of demonstration. 
  static void MyTransform(int i, ParallelLoopState pls) {  
 
    // Break out of loop if a negative value is found. 
    if(data[i] < 0) pls.Break(); 
 
    // So something for demonstration purposes. 
    data[i] = data[i] / 10; 
 
    if(data[i] < 1000) data[i] = 0; 
    if(data[i] > 1000 & data[i] < 2000) data[i] = 100; 
    if(data[i] > 2000 & data[i] < 3000) data[i] = 200; 
    if(data[i] > 3000) data[i] = 300; 
  }  
 
  static void Main() {  
 
    Console.WriteLine("Main thread starting.");  
 
    data = new int[100000000]; 
 
    // Initialize data. 
    for(int i=0; i < data.Length; i++) data[i] = i; 
 
    // Put a negative value into data. 
    data[1000] = -10; 
 
    // Parallel transform loop. 
    ParallelLoopResult loopResult =  
                Parallel.For(0, data.Length, MyTransform); 
 
    // See if the loop ran to completion. 
    if(!loopResult.IsCompleted) 
      Console.WriteLine("\nLoop Terminated early because a " + 
                        "negative value was encountered\n" + 
                        "in iteration number " + 
                         loopResult.LowestBreakIteration + ".\n"); 
 
    Console.WriteLine("Main thread ending.");  
  }  
}

listing 14
// Use ParallelLoopResult, ParallelLoopState, and Break() 
// with a parallel ForEach() loop. 
  
using System;  
using System.Threading.Tasks; 
  
class DemoParallelForWithLoopResult {  
  static int[] data; 
 
  // A method to be run as the body of a parallel loop. 
  // The statements in this loop are designed to simply 
  // consume some CPU time for the puposes of demonstration. 
  // In this version, notice that the value of an element of 
  // of data is passed to v, not an index. 
  static void DisplayData(int v, ParallelLoopState pls) {  
 
    // Break out of loop if a negative value is found. 
    if(v < 0) pls.Break(); 
 
    Console.WriteLine("Value: " + v); 
  }  
 
  static void Main() {  
 
    Console.WriteLine("Main thread starting.");  
 
    data = new int[100000000]; 
 
    // Initialize data. 
    for(int i=0; i < data.Length; i++) data[i] = i; 
 
    // Put a negative value into data. 
    data[100000] = -10; 
 
    // Use a parallel ForEach() loop to display the data. 
    ParallelLoopResult loopResult =  
                Parallel.ForEach(data, DisplayData); 
 
    // See if the loop ran to completion. 
    if(!loopResult.IsCompleted) 
      Console.WriteLine("\nLoop Terminated early because a " + 
                        "negative value was encountered\n" + 
                        "in iteration number " + 
                         loopResult.LowestBreakIteration + ".\n"); 
 
    Console.WriteLine("Main thread ending.");  
  }  
}

listing 15
// A Simple PLINQ Query. 
  
using System;  
using System.Linq; 
  
class PLINQDemo {  
 
  static void Main() {  
 
    int[] data = new int[10000000]; 
 
    // Initialize the data to positve values. 
    for(int i=0; i < data.Length; i++) data[i] = i; 
 
    // Now, insert some negative values. 
    data[1000] = -1; 
    data[14000] = -2; 
    data[15000] = -3; 
    data[676000] = -4; 
    data[8024540] = -5; 
    data[9908000] = -6; 
 
    // Use a PLINQ query to find the negative values. 
    var negatives = from val in data.AsParallel() 
                    where val < 0 
                    select val; 
 
    foreach(var v in negatives) 
      Console.Write(v + " "); 
       
    Console.WriteLine(); 
  }  
}

listing 16
// Cancel a parallel query. 
  
using System;  
using System.Linq; 
using System.Threading; 
using System.Threading.Tasks; 
  
class PLINQCancelDemo {  
 
  static void Main() {  
    CancellationTokenSource cancelTokSrc = new CancellationTokenSource();	 
    int[] data = new int[10000000]; 
 
    // Initialize the data to positve values. 
    for(int i=0; i < data.Length; i++) data[i] = i; 
 
    // Now, insert some negative values. 
    data[1000] = -1; 
    data[14000] = -2; 
    data[15000] = -3; 
    data[676000] = -4; 
    data[8024540] = -5; 
    data[9908000] = -6; 
 
    // Use a PLINQ query to find the negative values. 
    var negatives = from val in data.AsParallel(). 
                                WithCancellation(cancelTokSrc.Token) 
                    where val < 0 
                    select val; 
 
    // Create a task that cancels the query after 100 milliseconds. 
    Task cancelTsk = Task.Factory.StartNew( () => { 
                       Thread.Sleep(100); 
                       cancelTokSrc.Cancel(); 
                     }); 
 
    try { 
      foreach(var v in negatives) 
        Console.Write(v + " "); 
    } catch(OperationCanceledException exc) { 
      Console.WriteLine(exc.Message); 
    } catch(AggregateException exc) { 
      Console.WriteLine(exc); 
    } finally { 
      cancelTsk.Wait(); 
      cancelTokSrc.Dispose(); 
      cancelTsk.Dispose(); 
    } 
   
    Console.WriteLine(); 
 
  }  
}

