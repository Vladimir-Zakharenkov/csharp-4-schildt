#region Russian

/*

Наиболее часто используемые исключения

В пространстве имен System определено несколько стандартных, встроенных исключений.
Все эти исключения являются производными от класса SystemException,
поскольку они генерируются системой CLR при появлении ошибки во время выполнения.
В табл. 13.1 перечислены некоторые наиболее часто используемые стандартные
исключения.

Таблица 13.1. Наиболее часто используемые исключения, определенные в пространстве имен System

Исключение                          Значение

ArrayTypeMismatchException          Тип сохраняемого значения несовместим с типом массива

DivideByZeroException               Попытка деления на нуль

IndexOutOfRangeException            Индекс оказался за границами массива

InvalidCastException                Неверно выполнено динамическое приведение типов

OutOfMemoryException                Недостаточно свободной памяти для дальнейшего выполнения
                                    программы. Это исключение может быть, например, сгенерировано, 
                                    если для создания объекта с помощью оператора new не хватает памяти

OverflowException                   Произошло арифметическое переполнение

NullReferenceException              Попытка использовать пустую ссылку, т.е. ссылку, которая
                                    не указывает ни на один из объектов

Большинство исключений, приведенных в табл. 13.1, не требует особых пояснений,
кроме исключения NullReferenceException. Это исключение генерируется при попытке 
использовать пустую ссылку на несуществующий объект, например, при вызове
метода по пустой ссылке. Пустой называется такая ссылка, которая не указывает
ни на один из объектов. Для того чтобы создать такую ссылку, достаточно, например,
присвоить явным образом пустое значение переменной ссылочного типа, используя
ключевое слово null. Пустые ссылки могут также появляться и другими, менее очевидными
путями. Ниже приведен пример программы, демонстрирующий обработку
исключения NullReferenceException.

*/

// Продемонстрировать обработку исключения NullReferenceException.

using System;

class X
{
    int x;

    public X(int a)
    {
        x = a;
    }

    public int Add(X o)
    {
        return x + o.x;
    }
}

// Продемонстрировать генерирование и обработку исключения NullReferenceException.
class NREDemo
{
    static void Main()
    {
        X p = new X(10);
        X q = null; // присвоить явным образом пустое значение переменной q
        int val;

        try
        {
            val = p.Add(q); // эта операция приведет к исключительной ситуации
        }
        catch (NullReferenceException)
        {
            Console.WriteLine("Исключение NullReferenceException!");
            Console.WriteLine("Исправление ошибки... \n");

            // А теперь исправить ошибку.
            q = new X(9);
            val = p.Add(q);
        }
        Console.WriteLine("Значение val равно {0}", val);

        Console.ReadKey();
    }
}

/*

Вот к какому результату приводит выполнение этой программы.

Исключение NullReferenceException!
Исправление ошибки...
Значение val равно 19

В приведенном выше примере программы создается класс X, в котором определяются
член х и метод Add(), складывающий значение члена х в вызывающем объекте
со значением члена х в объекте, передаваемом этому методу в качестве параметра. Оба
объекта класса X создаются в методе Main(). Первый из них (переменная р) инициализируется,
а второй (переменная q) — нет. Вместо этого переменной q присваивается
пустое значение. Затем вызывается метод р.Add() с переменной q в качестве аргумента.
Но поскольку переменная q не ссылается ни на один из объектов, то при попытке
получить значение члена q.х генерируется исключение NullReferenceException.

*/

#endregion

#region English

/*

Commonly Used Exceptions

The System namespace defines several standard, built-in exceptions. All are derived (either
directly or indirectly) from SystemException since they are generated by the CLR when
runtime errors occur. Several of the more commonly used standard exceptions are shown
in Table 13-1.

TABLE 13-1 Commonly Used Exceptions Defined Within the System Namespace

Exception                       Meaning

ArrayTypeMismatchException      Type of value being stored is incompatible with 
                                the type of the array.

DivideByZeroException           Division by zero attempted.

IndexOutOfRangeException        Array index is out-of-bounds.

InvalidCastException            A runtime cast is invalid.

OutOfMemoryException            Insufficient free memory exists to continue program 
                                execution. For example, this exception will be thrown if 
                                there is not sufficient free memory to create an object
                                via new.

OverflowException               An arithmetic overflow occurred.

NullReferenceException          An attempt was made to operate on a null reference—that 
                                is, a reference that does not refer to an object.

Most of the exceptions in Table 13-1 are self-explanatory, with the possible exception of
NullReferenceException. This exception is thrown when there is an attempt to use a null
reference as if it referred to an object—for example, if you attempt to call a method on a null
reference. A null reference is a reference that does not point to any object. One way to create a
null reference is to explicitly assign it the value null by using the keyword null. Null references
can also occur in other ways that are less obvious. Here is a program that demonstrates the
NullReferenceException:

*/

// Use the NullReferenceException. 

//using System;  

//class X
//{
//    int x;
//    public X(int a)
//    {
//        x = a;
//    }

//    public int Add(X o)
//    {
//        return x + o.x;
//    }
//}

//// Demonstrate NullReferenceException. 
//class NREDemo
//{
//    static void Main()
//    {
//        X p = new X(10);
//        X q = null; // q is explicitly assigned null 
//        int val;

//        try
//        {
//            val = p.Add(q); // this will lead to an exception 
//        }
//        catch (NullReferenceException)
//        {
//            Console.WriteLine("NullReferenceException!");
//            Console.WriteLine("fixing...\n");

//            // Now, fix it. 
//            q = new X(9);
//            val = p.Add(q);
//        }

//        Console.WriteLine("val is {0}", val);

//        Console.ReadKey();
//    }
//}

/*

The output from the program is shown here:

NullReferenceException!
fixing...
val is 19

The program creates a class called X that defines a member called x and the Add()
method, which adds the invoking object’s x to the x in the object passed as a parameter. In
Main(), two X objects are created. The first, p, is initialized. The second, q, is not. Instead, it
is explicitly assigned null. Then p.Add() is called with q as an argument. Because q does
not refer to any object, a NullReferenceException is generated when the attempt is made to
obtain the value of q.x.

*/

#endregion