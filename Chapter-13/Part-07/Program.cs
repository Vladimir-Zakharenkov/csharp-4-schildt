#region Russian

/*

Перехват всех исключений

Время от времени возникает потребность в перехвате всех исключений независимо
от их типа. Для этой цели служит оператор catch, в котором тип и переменная исключения
не указываются. Ниже приведена общая форма такого оператора.

catch {
// обработка исключений
}

С помощью такой формы создается "универсальный" обработчик всех исключений,
перехватываемых в программе.

Ниже приведен пример такого "универсального" обработчика исключений. Обратите
внимание на то, что он перехватывает и обрабатывает оба исключения,
IndexOutOfRangeException и DivideByZeroException, генерируемых в программе.

*/

// Использовать "универсальный" обработчик исключений.

using System;

class ExcDemo3
{
    static void Main()
    {
        // Здесь массив numer длиннее массива demon.
        int[] numer = { 4, 8, 16, 32, 64, 128, 256, 512 };
        int[] denom = { 2, 0, 4, 4, 0, 8 };

        for (int i = 0; i < numer.Length; i++)
        {
            try
            {
                Console.WriteLine(numer[i] + " / " + denom[i] + " равно " + numer[i] / denom[i]);
            }
            catch
            {
                // "Универсальный" перехват.
                Console.WriteLine("Возникла некоторая исключительная ситуация.");
            }
        }

        Console.ReadKey();
    }
}

/*

При выполнении этой программы получается следующий результат.

4/2 равно 2
Возникла некоторая исключительная ситуация.
16/4 равно 4
32/4 равно 8
Возникла некоторая исключительная ситуация.
128 / 8 равно 16
Возникла некоторая исключительная ситуация.
Возникла некоторая исключительная ситуация.

Применяя "универсальный" перехват, следует иметь в виду, что его блок должен
располагаться последним по порядку среди всех блоков catch.

ПРИМЕЧАНИЕ
В подавляющем большинстве случаев "универсальный" обработчик исключений не применяется.
Как правило, исключения, которые могут быть сгенерированы в коде, обрабатываются
по отдельности. Неправильное использование “универсального” обработчика может
привести к тому, что ошибки, перехватывавшиеся при тестировании программы, маскируются.
Кроме того, организовать надлежащую обработку всех исключительных ситуаций в одном
обработчике не так-то просто. Иными словами, “универсальный" обработчик исключений
может оказаться пригодным лишь в особых случаях, например в инструментальном средстве
анализа кода во время выполнения.

*/

#endregion

#region English

/*

Catching All Exceptions

Occasionally, you might want to catch all exceptions, no matter the type. To do this, use a
catch clause that specifies no exception type or variable. It has this general form:

catch {
// handle exceptions
}

This creates a “catch all” handler that ensures that all exceptions are caught by your
program.

Here is an example of a “catch all” exception handler. Notice that it catches both the
IndexOutOfRangeException and the DivideByZeroException generated by the program:

*/

// Use the "catch all" catch. 

//using System; 

//class ExcDemo5
//{
//    static void Main()
//    {
//        // Here, numer is longer than denom. 
//        int[] numer = { 4, 8, 16, 32, 64, 128, 256, 512 };
//        int[] denom = { 2, 0, 4, 4, 0, 8 };

//        for (int i = 0; i < numer.Length; i++)
//        {
//            try
//            {
//                Console.WriteLine(numer[i] + " / " +
//                                   denom[i] + " is " +
//                                   numer[i] / denom[i]);
//            }
//            catch
//            { // A "catch-all" catch. 
//                Console.WriteLine("Some exception occurred.");
//            }
//        }
//    }
//}

/*

The output is shown here:

4 / 2 is 2
Some exception occurred.
16 / 4 is 4
32 / 4 is 8
Some exception occurred.
128 / 8 is 16
Some exception occurred.
Some exception occurred.

There is one point to remember about using a catch-all catch: It must be the last catch
clause in the catch sequence.

NOTE
In the vast majority of cases you should not use the “catch all” handler as a means of dealing
with exceptions. It is normally better to deal individually with the exceptions that your code can
generate. The inappropriate use of the “catch all” handler can lead to situations in which errors
that would otherwise be noticed during testing are masked. It is also difficult to correctly handle
all types of exceptions with a single handler. That said, a “catch all” handler might be appropriate
in certain specialized circumstances, such as in a runtime code analysis tool.

*/

#endregion