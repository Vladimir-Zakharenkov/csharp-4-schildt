#region Russian

/*

Переменные могут быть объявлены в любом месте кодового блока, но они становятся
действительными только после своего объявления. Так, если объявить переменную
в начале метода, то она будет доступна для всего остального кода в пределах этого
метода. А если объявить переменную в конце блока, то она окажется, по существу, бесполезной,
поскольку не будет доступной ни одному коду.

Если в объявление переменной включается инициализатор, то такая переменная
инициализируется повторно при каждом входе в тот блок, в котором она объявлена.
Рассмотрим следующий пример программы.

*/

// Продемонстрировать время существования переменной.
using System;
class VarInitDemo
{
    static void Main()
    {
        int x;

        for (x = 0; x < 3; x++)
        {
            int у = -1; // Переменная у инициализируется при каждом входе в блок.

            Console.WriteLine("у равно: " + у); // Здесь всегда выводится -1

            у = 100;

            Console.WriteLine("у теперь равно: " + у);
        }
    }
}

/*

Ниже приведен результат выполнения этой программы.

у равно: -1
у теперь равно: 100
у равно: -1
у теперь равно: 100
у равно: -1
у теперь равно: 100

Как видите, переменная у повторно инициализируется одним и тем же значением
-1 при каждом входе во внутренний цикл for. И несмотря на то, что после этого цикла
ей присваивается значение 100, оно теряется при повторной ее инициализации.

*/

#endregion 

#region English

/*

Within a block, variables can be declared at any point, but are valid only after they are
declared. Thus, if you define a variable at the start of a method, it is available to all of the
code within that method. Conversely, if you declare a variable at the end of a block, it is
effectively useless, because no code will have access to it.

If a variable declaration includes an initializer, then that variable will be reinitialized
each time the block in which it is declared is entered. For example, consider this program:

*/

// Demonstrate lifetime of a variable.
//using System;

//class VarInitDemo
//{
//    static void Main()
//    {
//        int x;

//        for (x = 0; x < 3; x++)
//        {
//            int y = -1; // y is initialized each time block is entered

//            Console.WriteLine("y is: " + y); // this always prints -1

//            y = 100;

//            Console.WriteLine("y is now: " + y);
//        }
//    }
//}

/*

The output generated by this program is shown here:

y is: -1
y is now: 100
y is: -1
y is now: 100
y is: -1
y is now: 100

As you can see, y is always reinitialized to –1 each time the inner for loop is entered. Even
though it is subsequently assigned the value 100, this value is lost.

*/

#endregion