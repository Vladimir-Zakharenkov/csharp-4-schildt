#region Russian

/*

Логический тип данных

Тип bool представляет два логических значения: "истина" и "ложь". Эти логические
значения обозначаются в C# зарезервированными словами true и false соответственно.
Следовательно, переменная или выражение типа bool будет принимать
одно из этих логических значений. Кроме того, в C# не определено взаимное преобразование
логических и целых значений. Например, 1 не преобразуется в значение true,
а 0 — в значение false.

В приведенном ниже примере программы демонстрируется применение типа bool.

*/

// Продемонстрировать применение типа bool.

using System;

class BoolDemo
{
    static void Main()
    {
        bool b;
        b = false;

        Console.WriteLine("b равно " + b);
        b = true;
        Console.WriteLine("b равно " + b);

        // Логическое значение может управлять оператором if.
        if (b)
        {
            Console.WriteLine("Выполняется.");
        }

        b = false;

        if (b)
        {
            Console.WriteLine("Не выполняется.");
        }

        // Результатом выполнения оператора отношения является логическое значение.
        Console.WriteLine("10 > 9 равно " + (10 > 9));
    }
}

/*

Эта программа дает следующий результат.

b равно False
b равно True
Выполняется.
10 > 9 равно True

В приведенной выше программе обнаруживаются три интересные особенности.
Во-первых, при выводе логического значения типа bool с помощью метода
WriteLine() на экране появляется значение "True" или "False". Во-вторых, самого
значения переменной типа bool достаточно для управления оператором if. Для этого
не нужно, например, записывать оператор if следующим образом.

if(b == true) ...

И в-третьих, результатом выполнения оператора отношения является логическое
значение. Именно поэтому в результате вычисления выражения 10 > 9 на экран выводится
значение "True." Кроме того, выражение 10 > 9 следует заключить в скобки,
поскольку оператор + имеет более высокий приоритет, чем оператор >.

*/

#endregion

#region English

/*

The bool Type

The bool type represents true/false values. C# defines the values true and false using the
reserved words true and false. Thus, a variable or expression of type bool will be one of
these two values. Furthermore, there is no conversion defined between bool and integer
values. For example, 1 does not convert to true, and 0 does not convert to false.

Here is a program that demonstrates the bool type:

*/

// Demonstrate bool values.
//using System;
//class BoolDemo
//{
//    static void Main()
//    {
//        bool b;
//        b = false;

//        Console.WriteLine("b is " + b);

//        b = true;

//        Console.WriteLine("b is " + b);

//        // A bool value can control the if statement.
//        if (b) Console.WriteLine("This is executed.");

//        b = false;
//        if (b) Console.WriteLine("This is not executed.");

//        // Outcome of a relational operator is a bool value.
//        Console.WriteLine("10 > 9 is " + (10 > 9));
//    }
//}

/*

The output generated by this program is shown here:

b is False
b is True
This is executed.
10 > 9 is True

There are three interesting things to notice about this program. First, as you can see,
when a bool value is output by WriteLine(), “True” or “False” is displayed. Second, the
value of a bool variable is sufficient, by itself, to control the if statement. There is no need
to write an if statement like this:

if(b == true) ...

Third, the outcome of a relational operator, such as <, is a bool value. This is why the
expression 10 > 9 displays the value “True.” Further, the extra set of parentheses around
10 > 9 is necessary because the + operator has a higher precedence than the >.

*/

#endregion